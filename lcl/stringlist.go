//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
// 
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
    . "github.com/rarnu/golcl/lcl/api"
    . "github.com/rarnu/golcl/lcl/types"
    "unsafe"
)

type TStringList struct {
    IStrings
    instance uintptr
    // 特殊情况下使用，主要应对Go的GC问题，与LCL没有太多关系。
    ptr unsafe.Pointer
}

// 创建一个新的对象。
// 
// Create a new object.
func NewStringList() *TStringList {
    s := new(TStringList)
    s.instance = StringList_Create()
    s.ptr = unsafe.Pointer(s.instance)
    setFinalizer(s, (*TStringList).Free)
    return s
}

// 动态转换一个已存在的对象实例。
// 
// Dynamically convert an existing object instance.
func AsStringList(obj interface{}) *TStringList {
    instance, ptr := getInstance(obj)
    if instance == 0 {
        return nil
    }
    return &TStringList{instance: instance, ptr: ptr}
}

// -------------------------- Deprecated begin --------------------------
// 新建一个对象来自已经存在的对象实例指针。
// 
// Create a new object from an existing object instance pointer.
// Deprecated: use AsStringList.
func StringListFromInst(inst uintptr) *TStringList {
    return AsStringList(inst)
}

// 新建一个对象来自已经存在的对象实例。
// 
// Create a new object from an existing object instance.
// Deprecated: use AsStringList.
func StringListFromObj(obj IObject) *TStringList {
    return AsStringList(obj)
}

// 新建一个对象来自不安全的地址。注意：使用此函数可能造成一些不明情况，慎用。
// 
// Create a new object from an unsecured address. Note: Using this function may cause some unclear situations and be used with caution..
// Deprecated: use AsStringList.
func StringListFromUnsafePointer(ptr unsafe.Pointer) *TStringList {
    return AsStringList(ptr)
}

// -------------------------- Deprecated end --------------------------
// 释放对象。
// 
// Free object.
func (s *TStringList) Free() {
    if s.instance != 0 {
        StringList_Free(s.instance)
        s.instance, s.ptr = 0, nullptr
    }
}

// 返回对象实例指针。
// 
// Return object instance pointer.
func (s *TStringList) Instance() uintptr {
    return s.instance
}

// 获取一个不安全的地址。
// 
// Get an unsafe address.
func (s *TStringList) UnsafeAddr() unsafe.Pointer {
    return s.ptr
}

// 检测地址是否为空。
// 
// Check if the address is empty.
func (s *TStringList) IsValid() bool {
    return s.instance != 0
}

// 检测当前对象是否继承自目标对象。
// 
// Checks whether the current object is inherited from the target object.
func (s *TStringList) Is() TIs {
    return TIs(s.instance)
}

// 动态转换当前对象为目标对象。
// 
// Dynamically convert the current object to the target object.
//func (s *TStringList) As() TAs {
//    return TAs(s.instance)
//}

// 获取类信息指针。
// 
// Get class information pointer.
func TStringListClass() TClass {
    return StringList_StaticClassType()
}

// Strings()的别名。
// 
// Alias of Strings().
func (s *TStringList) S(Index int32) string {
    return s.Strings(Index)
}

// SetStrings()的别名。
// 
// Alias of SetStrings().
func (s *TStringList) SetS(Index int32, value string) {
    s.SetStrings(Index, value)
}

func (s *TStringList) Add(S string) int32 {
    return StringList_Add(s.instance, S)
}

func (s *TStringList) AddObject(S string, AObject IObject) int32 {
    return StringList_AddObject(s.instance, S, CheckPtr(AObject))
}

// 复制一个对象，如果对象实现了此方法的话。
//
// Copy an object, if the object implements this method.
func (s *TStringList) Assign(Source IObject) {
    StringList_Assign(s.instance, CheckPtr(Source))
}

// 清除。
func (s *TStringList) Clear() {
    StringList_Clear(s.instance)
}

func (s *TStringList) Delete(Index int32) {
    StringList_Delete(s.instance, Index)
}

func (s *TStringList) IndexOf(S string) int32 {
    return StringList_IndexOf(s.instance, S)
}

func (s *TStringList) Insert(Index int32, S string) {
    StringList_Insert(s.instance, Index, S)
}

func (s *TStringList) InsertObject(Index int32, S string, AObject IObject) {
    StringList_InsertObject(s.instance, Index, S, CheckPtr(AObject))
}

func (s *TStringList) Append(S string) {
    StringList_Append(s.instance, S)
}

func (s *TStringList) BeginUpdate() {
    StringList_BeginUpdate(s.instance)
}

func (s *TStringList) EndUpdate() {
    StringList_EndUpdate(s.instance)
}

// 与一个对象进行比较。
//
// Compare with an object.
func (s *TStringList) Equals(Strings IObject) bool {
    return StringList_Equals(s.instance, CheckPtr(Strings))
}

func (s *TStringList) IndexOfName(Name string) int32 {
    return StringList_IndexOfName(s.instance, Name)
}

func (s *TStringList) IndexOfObject(AObject IObject) int32 {
    return StringList_IndexOfObject(s.instance, CheckPtr(AObject))
}

// 从文件加载。
func (s *TStringList) LoadFromFile(FileName string) {
    StringList_LoadFromFile(s.instance, FileName)
}

// 文件流加载。
func (s *TStringList) LoadFromStream(Stream IStream) {
    StringList_LoadFromStream(s.instance, CheckPtr(Stream))
}

func (s *TStringList) Move(CurIndex int32, NewIndex int32) {
    StringList_Move(s.instance, CurIndex, NewIndex)
}

// 保存至文件。
func (s *TStringList) SaveToFile(FileName string) {
    StringList_SaveToFile(s.instance, FileName)
}

// 保存至流。
func (s *TStringList) SaveToStream(Stream IStream) {
    StringList_SaveToStream(s.instance, CheckPtr(Stream))
}

// 获取类名路径。
//
// Get the class name path.
func (s *TStringList) GetNamePath() string {
    return StringList_GetNamePath(s.instance)
}

// 获取类的类型信息。
//
// Get class type information.
func (s *TStringList) ClassType() TClass {
    return StringList_ClassType(s.instance)
}

// 获取当前对象类名称。
//
// Get the current object class name.
func (s *TStringList) ClassName() string {
    return StringList_ClassName(s.instance)
}

// 获取当前对象实例大小。
//
// Get the current object instance size.
func (s *TStringList) InstanceSize() int32 {
    return StringList_InstanceSize(s.instance)
}

// 判断当前类是否继承自指定类。
//
// Determine whether the current class inherits from the specified class.
func (s *TStringList) InheritsFrom(AClass TClass) bool {
    return StringList_InheritsFrom(s.instance, AClass)
}

// 获取类的哈希值。
//
// Get the hash value of the class.
func (s *TStringList) GetHashCode() int32 {
    return StringList_GetHashCode(s.instance)
}

// 文本类信息。
//
// Text information.
func (s *TStringList) ToString() string {
    return StringList_ToString(s.instance)
}

func (s *TStringList) Sorted() bool {
    return StringList_GetSorted(s.instance)
}

func (s *TStringList) SetSorted(value bool) {
    StringList_SetSorted(s.instance, value)
}

// 设置改变事件。
//
// Set changed event.
func (s *TStringList) SetOnChange(fn TNotifyEvent) {
    StringList_SetOnChange(s.instance, fn)
}

func (s *TStringList) SetOnChanging(fn TNotifyEvent) {
    StringList_SetOnChanging(s.instance, fn)
}

func (s *TStringList) Capacity() int32 {
    return StringList_GetCapacity(s.instance)
}

func (s *TStringList) SetCapacity(value int32) {
    StringList_SetCapacity(s.instance, value)
}

func (s *TStringList) CommaText() string {
    return StringList_GetCommaText(s.instance)
}

func (s *TStringList) SetCommaText(value string) {
    StringList_SetCommaText(s.instance, value)
}

func (s *TStringList) Count() int32 {
    return StringList_GetCount(s.instance)
}

func (s *TStringList) Delimiter() uint16 {
    return StringList_GetDelimiter(s.instance)
}

func (s *TStringList) SetDelimiter(value uint16) {
    StringList_SetDelimiter(s.instance, value)
}

func (s *TStringList) NameValueSeparator() uint16 {
    return StringList_GetNameValueSeparator(s.instance)
}

func (s *TStringList) SetNameValueSeparator(value uint16) {
    StringList_SetNameValueSeparator(s.instance, value)
}

// 获取文本。
func (s *TStringList) Text() string {
    return StringList_GetText(s.instance)
}

// 设置文本。
func (s *TStringList) SetText(value string) {
    StringList_SetText(s.instance, value)
}

func (s *TStringList) Objects(Index int32) *TObject {
    return AsObject(StringList_GetObjects(s.instance, Index))
}

func (s *TStringList) SetObjects(Index int32, value IObject) {
    StringList_SetObjects(s.instance, Index, CheckPtr(value))
}

func (s *TStringList) Values(Name string) string {
    return StringList_GetValues(s.instance, Name)
}

func (s *TStringList) SetValues(Name string, value string) {
    StringList_SetValues(s.instance, Name, value)
}

func (s *TStringList) ValueFromIndex(Index int32) string {
    return StringList_GetValueFromIndex(s.instance, Index)
}

func (s *TStringList) SetValueFromIndex(Index int32, value string) {
    StringList_SetValueFromIndex(s.instance, Index, value)
}

func (s *TStringList) Strings(Index int32) string {
    return StringList_GetStrings(s.instance, Index)
}

func (s *TStringList) SetStrings(Index int32, value string) {
    StringList_SetStrings(s.instance, Index, value)
}

