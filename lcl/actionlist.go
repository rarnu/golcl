//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	"unsafe"

	. "github.com/rarnu/golcl/lcl/api"
	. "github.com/rarnu/golcl/lcl/types"
)

type TActionList struct {
	IComponent
	instance uintptr
	// 特殊情况下使用，主要应对Go的GC问题，与LCL没有太多关系。
	ptr unsafe.Pointer
}

// NewActionList 创建一个新的对象。
func NewActionList(owner IComponent) *TActionList {
	a := new(TActionList)
	a.instance = ActionList_Create(CheckPtr(owner))
	a.ptr = unsafe.Pointer(a.instance)
	return a
}

// AsActionList 动态转换一个已存在的对象实例。
func AsActionList(obj any) *TActionList {
	instance, ptr := getInstance(obj)
	if instance == 0 {
		return nil
	}
	return &TActionList{instance: instance, ptr: ptr}
}

// ActionListFromInst 新建一个对象来自已经存在的对象实例指针。
// Deprecated: use AsActionList.
func ActionListFromInst(inst uintptr) *TActionList {
	return AsActionList(inst)
}

// ActionListFromObj 新建一个对象来自已经存在的对象实例。
// Deprecated: use AsActionList.
func ActionListFromObj(obj IObject) *TActionList {
	return AsActionList(obj)
}

// ActionListFromUnsafePointer 新建一个对象来自不安全的地址。注意：使用此函数可能造成一些不明情况，慎用。
// Deprecated: use AsActionList.
func ActionListFromUnsafePointer(ptr unsafe.Pointer) *TActionList {
	return AsActionList(ptr)
}

// Free 释放对象。
func (a *TActionList) Free() {
	if a.instance != 0 {
		ActionList_Free(a.instance)
		a.instance, a.ptr = 0, nullptr
	}
}

// Instance 返回对象实例指针。
func (a *TActionList) Instance() uintptr {
	return a.instance
}

// UnsafeAddr 获取一个不安全的地址。
func (a *TActionList) UnsafeAddr() unsafe.Pointer {
	return a.ptr
}

// IsValid 检测地址是否为空。
func (a *TActionList) IsValid() bool {
	return a.instance != 0
}

// Is 检测当前对象是否继承自目标对象。
func (a *TActionList) Is() TIs {
	return TIs(a.instance)
}

// 动态转换当前对象为目标对象。
//
// Dynamically convert the current object to the target object.
//func (a *TActionList) As() TAs {
//    return TAs(a.instance)
//}

// TActionListClass 获取类信息指针。
func TActionListClass() TClass {
	return ActionList_StaticClassType()
}

// FindComponent 查找指定名称的组件。
func (a *TActionList) FindComponent(AName string) *TComponent {
	return AsComponent(ActionList_FindComponent(a.instance, AName))
}

// GetNamePath 获取类名路径。
func (a *TActionList) GetNamePath() string {
	return ActionList_GetNamePath(a.instance)
}

// HasParent 是否有父容器。
func (a *TActionList) HasParent() bool {
	return ActionList_HasParent(a.instance)
}

// Assign 复制一个对象，如果对象实现了此方法的话。
func (a *TActionList) Assign(Source IObject) {
	ActionList_Assign(a.instance, CheckPtr(Source))
}

// ClassType 获取类的类型信息。
func (a *TActionList) ClassType() TClass {
	return ActionList_ClassType(a.instance)
}

// ClassName 获取当前对象类名称。
func (a *TActionList) ClassName() string {
	return ActionList_ClassName(a.instance)
}

// InstanceSize 获取当前对象实例大小。
func (a *TActionList) InstanceSize() int32 {
	return ActionList_InstanceSize(a.instance)
}

// InheritsFrom 判断当前类是否继承自指定类。
func (a *TActionList) InheritsFrom(AClass TClass) bool {
	return ActionList_InheritsFrom(a.instance, AClass)
}

// Equals 与一个对象进行比较。
func (a *TActionList) Equals(Obj IObject) bool {
	return ActionList_Equals(a.instance, CheckPtr(Obj))
}

// GetHashCode 获取类的哈希值。
func (a *TActionList) GetHashCode() int32 {
	return ActionList_GetHashCode(a.instance)
}

// ToString 文本类信息。
func (a *TActionList) ToString() string {
	return ActionList_ToString(a.instance)
}

// Images 获取图标索引列表对象。
func (a *TActionList) Images() *TImageList {
	return AsImageList(ActionList_GetImages(a.instance))
}

// SetImages 设置图标索引列表对象。
func (a *TActionList) SetImages(value IComponent) {
	ActionList_SetImages(a.instance, CheckPtr(value))
}

func (a *TActionList) State() TActionListState {
	return ActionList_GetState(a.instance)
}

func (a *TActionList) SetState(value TActionListState) {
	ActionList_SetState(a.instance, value)
}

// SetOnChange 设置改变事件。
func (a *TActionList) SetOnChange(fn TNotifyEvent) {
	ActionList_SetOnChange(a.instance, fn)
}

// ComponentCount 获取组件总数。
func (a *TActionList) ComponentCount() int32 {
	return ActionList_GetComponentCount(a.instance)
}

// ComponentIndex 获取组件索引。
func (a *TActionList) ComponentIndex() int32 {
	return ActionList_GetComponentIndex(a.instance)
}

// SetComponentIndex 设置组件索引。
func (a *TActionList) SetComponentIndex(value int32) {
	ActionList_SetComponentIndex(a.instance, value)
}

// Owner 获取组件所有者。
func (a *TActionList) Owner() *TComponent {
	return AsComponent(ActionList_GetOwner(a.instance))
}

// Name 获取组件名称。
func (a *TActionList) Name() string {
	return ActionList_GetName(a.instance)
}

// SetName 设置组件名称。
func (a *TActionList) SetName(value string) {
	ActionList_SetName(a.instance, value)
}

// Tag 获取对象标记。
func (a *TActionList) Tag() int {
	return ActionList_GetTag(a.instance)
}

// SetTag 设置对象标记。
func (a *TActionList) SetTag(value int) {
	ActionList_SetTag(a.instance, value)
}

// Components 获取指定索引组件。
func (a *TActionList) Components(AIndex int32) *TComponent {
	return AsComponent(ActionList_GetComponents(a.instance, AIndex))
}
