//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
// 
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	. "github.com/rarnu/golcl/lcl/api"
	. "github.com/rarnu/golcl/lcl/types"
	"unsafe"
)

type TCheckListBox struct {
	IWinControl
	instance uintptr
	// 特殊情况下使用，主要应对Go的GC问题，与LCL没有太多关系。
	ptr unsafe.Pointer
}

// 创建一个新的对象。
// 
// Create a new object.
func NewCheckListBox(owner IComponent) *TCheckListBox {
	c := new(TCheckListBox)
	c.instance = CheckListBox_Create(CheckPtr(owner))
	c.ptr = unsafe.Pointer(c.instance)
	return c
}

// 动态转换一个已存在的对象实例。
// 
// Dynamically convert an existing object instance.
func AsCheckListBox(obj interface{}) *TCheckListBox {
	instance, ptr := getInstance(obj)
	if instance == 0 {
		return nil
	}
	return &TCheckListBox{instance: instance, ptr: ptr}
}

// -------------------------- Deprecated begin --------------------------
// 新建一个对象来自已经存在的对象实例指针。
// 
// Create a new object from an existing object instance pointer.
// Deprecated: use AsCheckListBox.
func CheckListBoxFromInst(inst uintptr) *TCheckListBox {
	return AsCheckListBox(inst)
}

// 新建一个对象来自已经存在的对象实例。
// 
// Create a new object from an existing object instance.
// Deprecated: use AsCheckListBox.
func CheckListBoxFromObj(obj IObject) *TCheckListBox {
	return AsCheckListBox(obj)
}

// 新建一个对象来自不安全的地址。注意：使用此函数可能造成一些不明情况，慎用。
// 
// Create a new object from an unsecured address. Note: Using this function may cause some unclear situations and be used with caution..
// Deprecated: use AsCheckListBox.
func CheckListBoxFromUnsafePointer(ptr unsafe.Pointer) *TCheckListBox {
	return AsCheckListBox(ptr)
}

// -------------------------- Deprecated end --------------------------
// 释放对象。
// 
// Free object.
func (c *TCheckListBox) Free() {
	if c.instance != 0 {
		CheckListBox_Free(c.instance)
		c.instance, c.ptr = 0, nullptr
	}
}

// 返回对象实例指针。
// 
// Return object instance pointer.
func (c *TCheckListBox) Instance() uintptr {
	return c.instance
}

// 获取一个不安全的地址。
// 
// Get an unsafe address.
func (c *TCheckListBox) UnsafeAddr() unsafe.Pointer {
	return c.ptr
}

// 检测地址是否为空。
// 
// Check if the address is empty.
func (c *TCheckListBox) IsValid() bool {
	return c.instance != 0
}

// 检测当前对象是否继承自目标对象。
// 
// Checks whether the current object is inherited from the target object.
func (c *TCheckListBox) Is() TIs {
	return TIs(c.instance)
}

// 动态转换当前对象为目标对象。
// 
// Dynamically convert the current object to the target object.
//func (c *TCheckListBox) As() TAs {
//    return TAs(c.instance)
//}

// 获取类信息指针。
// 
// Get class information pointer.
func TCheckListBoxClass() TClass {
	return CheckListBox_StaticClassType()
}

func (c *TCheckListBox) CheckAll(AState TCheckBoxState, AllowGrayed bool, AllowDisabled bool) {
	CheckListBox_CheckAll(c.instance, AState, AllowGrayed, AllowDisabled)
}

func (c *TCheckListBox) AddItem(Item string, AObject IObject) {
	CheckListBox_AddItem(c.instance, Item, CheckPtr(AObject))
}

// 清除。
func (c *TCheckListBox) Clear() {
	CheckListBox_Clear(c.instance)
}

// 清除选择。
func (c *TCheckListBox) ClearSelection() {
	CheckListBox_ClearSelection(c.instance)
}

// 删除选择的。
func (c *TCheckListBox) DeleteSelected() {
	CheckListBox_DeleteSelected(c.instance)
}

func (c *TCheckListBox) ItemAtPos(Pos TPoint, Existing bool) int32 {
	return CheckListBox_ItemAtPos(c.instance, Pos, Existing)
}

func (c *TCheckListBox) ItemRect(Index int32) TRect {
	return CheckListBox_ItemRect(c.instance, Index)
}

// 全选。
func (c *TCheckListBox) SelectAll() {
	CheckListBox_SelectAll(c.instance)
}

// 是否可以获得焦点。
func (c *TCheckListBox) CanFocus() bool {
	return CheckListBox_CanFocus(c.instance)
}

// 返回是否包含指定控件。
//
// it's contain a specified control.
func (c *TCheckListBox) ContainsControl(Control IControl) bool {
	return CheckListBox_ContainsControl(c.instance, CheckPtr(Control))
}

// 返回指定坐标及相关属性位置控件。
//
// Returns the specified coordinate and the relevant attribute position control..
func (c *TCheckListBox) ControlAtPos(Pos TPoint, AllowDisabled bool, AllowWinControls bool, AllLevels bool) *TControl {
	return AsControl(CheckListBox_ControlAtPos(c.instance, Pos, AllowDisabled, AllowWinControls, AllLevels))
}

// 禁用控件的对齐。
//
// Disable control alignment.
func (c *TCheckListBox) DisableAlign() {
	CheckListBox_DisableAlign(c.instance)
}

// 启用控件对齐。
//
// Enabled control alignment.
func (c *TCheckListBox) EnableAlign() {
	CheckListBox_EnableAlign(c.instance)
}

// 查找子控件。
//
// Find sub controls.
func (c *TCheckListBox) FindChildControl(ControlName string) *TControl {
	return AsControl(CheckListBox_FindChildControl(c.instance, ControlName))
}

func (c *TCheckListBox) FlipChildren(AllLevels bool) {
	CheckListBox_FlipChildren(c.instance, AllLevels)
}

// 返回是否获取焦点。
//
// Return to get focus.
func (c *TCheckListBox) Focused() bool {
	return CheckListBox_Focused(c.instance)
}

// 句柄是否已经分配。
//
// Is the handle already allocated.
func (c *TCheckListBox) HandleAllocated() bool {
	return CheckListBox_HandleAllocated(c.instance)
}

// 插入一个控件。
//
// Insert a control.
func (c *TCheckListBox) InsertControl(AControl IControl) {
	CheckListBox_InsertControl(c.instance, CheckPtr(AControl))
}

// 要求重绘。
//
// Redraw.
func (c *TCheckListBox) Invalidate() {
	CheckListBox_Invalidate(c.instance)
}

// 绘画至指定DC。
//
// Painting to the specified DC.
func (c *TCheckListBox) PaintTo(DC HDC, X int32, Y int32) {
	CheckListBox_PaintTo(c.instance, DC, X, Y)
}

// 移除一个控件。
//
// Remove a control.
func (c *TCheckListBox) RemoveControl(AControl IControl) {
	CheckListBox_RemoveControl(c.instance, CheckPtr(AControl))
}

// 重新对齐。
//
// Realign.
func (c *TCheckListBox) Realign() {
	CheckListBox_Realign(c.instance)
}

// 重绘。
//
// Repaint.
func (c *TCheckListBox) Repaint() {
	CheckListBox_Repaint(c.instance)
}

// 按比例缩放。
//
// Scale by.
func (c *TCheckListBox) ScaleBy(M int32, D int32) {
	CheckListBox_ScaleBy(c.instance, M, D)
}

// 滚动至指定位置。
//
// Scroll by.
func (c *TCheckListBox) ScrollBy(DeltaX int32, DeltaY int32) {
	CheckListBox_ScrollBy(c.instance, DeltaX, DeltaY)
}

// 设置组件边界。
//
// Set component boundaries.
func (c *TCheckListBox) SetBounds(ALeft int32, ATop int32, AWidth int32, AHeight int32) {
	CheckListBox_SetBounds(c.instance, ALeft, ATop, AWidth, AHeight)
}

// 设置控件焦点。
//
// Set control focus.
func (c *TCheckListBox) SetFocus() {
	CheckListBox_SetFocus(c.instance)
}

// 控件更新。
//
// Update.
func (c *TCheckListBox) Update() {
	CheckListBox_Update(c.instance)
}

// 将控件置于最前。
//
// Bring the control to the front.
func (c *TCheckListBox) BringToFront() {
	CheckListBox_BringToFront(c.instance)
}

// 将客户端坐标转为绝对的屏幕坐标。
//
// Convert client coordinates to absolute screen coordinates.
func (c *TCheckListBox) ClientToScreen(Point TPoint) TPoint {
	return CheckListBox_ClientToScreen(c.instance, Point)
}

// 将客户端坐标转为父容器坐标。
//
// Convert client coordinates to parent container coordinates.
func (c *TCheckListBox) ClientToParent(Point TPoint, AParent IWinControl) TPoint {
	return CheckListBox_ClientToParent(c.instance, Point, CheckPtr(AParent))
}

// 是否在拖拽中。
//
// Is it in the middle of dragging.
func (c *TCheckListBox) Dragging() bool {
	return CheckListBox_Dragging(c.instance)
}

// 是否有父容器。
//
// Is there a parent container.
func (c *TCheckListBox) HasParent() bool {
	return CheckListBox_HasParent(c.instance)
}

// 隐藏控件。
//
// Hidden control.
func (c *TCheckListBox) Hide() {
	CheckListBox_Hide(c.instance)
}

// 发送一个消息。
//
// Send a message.
func (c *TCheckListBox) Perform(Msg uint32, WParam uintptr, LParam int) int {
	return CheckListBox_Perform(c.instance, Msg, WParam, LParam)
}

// 刷新控件。
//
// Refresh control.
func (c *TCheckListBox) Refresh() {
	CheckListBox_Refresh(c.instance)
}

// 将屏幕坐标转为客户端坐标。
//
// Convert screen coordinates to client coordinates.
func (c *TCheckListBox) ScreenToClient(Point TPoint) TPoint {
	return CheckListBox_ScreenToClient(c.instance, Point)
}

// 将父容器坐标转为客户端坐标。
//
// Convert parent container coordinates to client coordinates.
func (c *TCheckListBox) ParentToClient(Point TPoint, AParent IWinControl) TPoint {
	return CheckListBox_ParentToClient(c.instance, Point, CheckPtr(AParent))
}

// 控件至于最后面。
//
// The control is placed at the end.
func (c *TCheckListBox) SendToBack() {
	CheckListBox_SendToBack(c.instance)
}

// 显示控件。
//
// Show control.
func (c *TCheckListBox) Show() {
	CheckListBox_Show(c.instance)
}

// 获取控件的字符，如果有。
//
// Get the characters of the control, if any.
func (c *TCheckListBox) GetTextBuf(Buffer *string, BufSize int32) int32 {
	return CheckListBox_GetTextBuf(c.instance, Buffer, BufSize)
}

// 获取控件的字符长，如果有。
//
// Get the character length of the control, if any.
func (c *TCheckListBox) GetTextLen() int32 {
	return CheckListBox_GetTextLen(c.instance)
}

// 设置控件字符，如果有。
//
// Set control characters, if any.
func (c *TCheckListBox) SetTextBuf(Buffer string) {
	CheckListBox_SetTextBuf(c.instance, Buffer)
}

// 查找指定名称的组件。
//
// Find the component with the specified name.
func (c *TCheckListBox) FindComponent(AName string) *TComponent {
	return AsComponent(CheckListBox_FindComponent(c.instance, AName))
}

// 获取类名路径。
//
// Get the class name path.
func (c *TCheckListBox) GetNamePath() string {
	return CheckListBox_GetNamePath(c.instance)
}

// 复制一个对象，如果对象实现了此方法的话。
//
// Copy an object, if the object implements this method.
func (c *TCheckListBox) Assign(Source IObject) {
	CheckListBox_Assign(c.instance, CheckPtr(Source))
}

// 获取类的类型信息。
//
// Get class type information.
func (c *TCheckListBox) ClassType() TClass {
	return CheckListBox_ClassType(c.instance)
}

// 获取当前对象类名称。
//
// Get the current object class name.
func (c *TCheckListBox) ClassName() string {
	return CheckListBox_ClassName(c.instance)
}

// 获取当前对象实例大小。
//
// Get the current object instance size.
func (c *TCheckListBox) InstanceSize() int32 {
	return CheckListBox_InstanceSize(c.instance)
}

// 判断当前类是否继承自指定类。
//
// Determine whether the current class inherits from the specified class.
func (c *TCheckListBox) InheritsFrom(AClass TClass) bool {
	return CheckListBox_InheritsFrom(c.instance, AClass)
}

// 与一个对象进行比较。
//
// Compare with an object.
func (c *TCheckListBox) Equals(Obj IObject) bool {
	return CheckListBox_Equals(c.instance, CheckPtr(Obj))
}

// 获取类的哈希值。
//
// Get the hash value of the class.
func (c *TCheckListBox) GetHashCode() int32 {
	return CheckListBox_GetHashCode(c.instance)
}

// 文本类信息。
//
// Text information.
func (c *TCheckListBox) ToString() string {
	return CheckListBox_ToString(c.instance)
}

func (c *TCheckListBox) AnchorToNeighbour(ASide TAnchorKind, ASpace int32, ASibling IControl) {
	CheckListBox_AnchorToNeighbour(c.instance, ASide, ASpace, CheckPtr(ASibling))
}

func (c *TCheckListBox) AnchorParallel(ASide TAnchorKind, ASpace int32, ASibling IControl) {
	CheckListBox_AnchorParallel(c.instance, ASide, ASpace, CheckPtr(ASibling))
}

// 置于指定控件的横向中心。
func (c *TCheckListBox) AnchorHorizontalCenterTo(ASibling IControl) {
	CheckListBox_AnchorHorizontalCenterTo(c.instance, CheckPtr(ASibling))
}

// 置于指定控件的纵向中心。
func (c *TCheckListBox) AnchorVerticalCenterTo(ASibling IControl) {
	CheckListBox_AnchorVerticalCenterTo(c.instance, CheckPtr(ASibling))
}

func (c *TCheckListBox) AnchorSame(ASide TAnchorKind, ASibling IControl) {
	CheckListBox_AnchorSame(c.instance, ASide, CheckPtr(ASibling))
}

func (c *TCheckListBox) AnchorAsAlign(ATheAlign TAlign, ASpace int32) {
	CheckListBox_AnchorAsAlign(c.instance, ATheAlign, ASpace)
}

func (c *TCheckListBox) AnchorClient(ASpace int32) {
	CheckListBox_AnchorClient(c.instance, ASpace)
}

func (c *TCheckListBox) ScaleDesignToForm(ASize int32) int32 {
	return CheckListBox_ScaleDesignToForm(c.instance, ASize)
}

func (c *TCheckListBox) ScaleFormToDesign(ASize int32) int32 {
	return CheckListBox_ScaleFormToDesign(c.instance, ASize)
}

func (c *TCheckListBox) Scale96ToForm(ASize int32) int32 {
	return CheckListBox_Scale96ToForm(c.instance, ASize)
}

func (c *TCheckListBox) ScaleFormTo96(ASize int32) int32 {
	return CheckListBox_ScaleFormTo96(c.instance, ASize)
}

func (c *TCheckListBox) Scale96ToFont(ASize int32) int32 {
	return CheckListBox_Scale96ToFont(c.instance, ASize)
}

func (c *TCheckListBox) ScaleFontTo96(ASize int32) int32 {
	return CheckListBox_ScaleFontTo96(c.instance, ASize)
}

func (c *TCheckListBox) ScaleScreenToFont(ASize int32) int32 {
	return CheckListBox_ScaleScreenToFont(c.instance, ASize)
}

func (c *TCheckListBox) ScaleFontToScreen(ASize int32) int32 {
	return CheckListBox_ScaleFontToScreen(c.instance, ASize)
}

func (c *TCheckListBox) Scale96ToScreen(ASize int32) int32 {
	return CheckListBox_Scale96ToScreen(c.instance, ASize)
}

func (c *TCheckListBox) ScaleScreenTo96(ASize int32) int32 {
	return CheckListBox_ScaleScreenTo96(c.instance, ASize)
}

func (c *TCheckListBox) AutoAdjustLayout(AMode TLayoutAdjustmentPolicy, AFromPPI int32, AToPPI int32, AOldFormWidth int32, ANewFormWidth int32) {
	CheckListBox_AutoAdjustLayout(c.instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)
}

func (c *TCheckListBox) FixDesignFontsPPI(ADesignTimePPI int32) {
	CheckListBox_FixDesignFontsPPI(c.instance, ADesignTimePPI)
}

func (c *TCheckListBox) ScaleFontsPPI(AToPPI int32, AProportion float64) {
	CheckListBox_ScaleFontsPPI(c.instance, AToPPI, AProportion)
}

func (c *TCheckListBox) SetOnClickCheck(fn TNotifyEvent) {
	CheckListBox_SetOnClickCheck(c.instance, fn)
}

// 获取控件自动调整。
//
// Get Control automatically adjusts.
func (c *TCheckListBox) Align() TAlign {
	return CheckListBox_GetAlign(c.instance)
}

// 设置控件自动调整。
//
// Set Control automatically adjusts.
func (c *TCheckListBox) SetAlign(value TAlign) {
	CheckListBox_SetAlign(c.instance, value)
}

func (c *TCheckListBox) AllowGrayed() bool {
	return CheckListBox_GetAllowGrayed(c.instance)
}

func (c *TCheckListBox) SetAllowGrayed(value bool) {
	CheckListBox_SetAllowGrayed(c.instance, value)
}

// 获取四个角位置的锚点。
func (c *TCheckListBox) Anchors() TAnchors {
	return CheckListBox_GetAnchors(c.instance)
}

// 设置四个角位置的锚点。
func (c *TCheckListBox) SetAnchors(value TAnchors) {
	CheckListBox_SetAnchors(c.instance, value)
}

func (c *TCheckListBox) BiDiMode() TBiDiMode {
	return CheckListBox_GetBiDiMode(c.instance)
}

func (c *TCheckListBox) SetBiDiMode(value TBiDiMode) {
	CheckListBox_SetBiDiMode(c.instance, value)
}

// 获取窗口边框样式。比如：无边框，单一边框等。
func (c *TCheckListBox) BorderStyle() TBorderStyle {
	return CheckListBox_GetBorderStyle(c.instance)
}

// 设置窗口边框样式。比如：无边框，单一边框等。
func (c *TCheckListBox) SetBorderStyle(value TBorderStyle) {
	CheckListBox_SetBorderStyle(c.instance, value)
}

// 获取颜色。
//
// Get color.
func (c *TCheckListBox) Color() TColor {
	return CheckListBox_GetColor(c.instance)
}

// 设置颜色。
//
// Set color.
func (c *TCheckListBox) SetColor(value TColor) {
	CheckListBox_SetColor(c.instance, value)
}

func (c *TCheckListBox) Columns() int32 {
	return CheckListBox_GetColumns(c.instance)
}

func (c *TCheckListBox) SetColumns(value int32) {
	CheckListBox_SetColumns(c.instance, value)
}

// 获取约束控件大小。
func (c *TCheckListBox) Constraints() *TSizeConstraints {
	return AsSizeConstraints(CheckListBox_GetConstraints(c.instance))
}

// 设置约束控件大小。
func (c *TCheckListBox) SetConstraints(value *TSizeConstraints) {
	CheckListBox_SetConstraints(c.instance, CheckPtr(value))
}

// 获取设置控件双缓冲。
//
// Get Set control double buffering.
func (c *TCheckListBox) DoubleBuffered() bool {
	return CheckListBox_GetDoubleBuffered(c.instance)
}

// 设置设置控件双缓冲。
//
// Set Set control double buffering.
func (c *TCheckListBox) SetDoubleBuffered(value bool) {
	CheckListBox_SetDoubleBuffered(c.instance, value)
}

// 获取设置控件拖拽时的光标。
//
// Get Set the cursor when the control is dragged.
func (c *TCheckListBox) DragCursor() TCursor {
	return CheckListBox_GetDragCursor(c.instance)
}

// 设置设置控件拖拽时的光标。
//
// Set Set the cursor when the control is dragged.
func (c *TCheckListBox) SetDragCursor(value TCursor) {
	CheckListBox_SetDragCursor(c.instance, value)
}

// 获取拖拽模式。
//
// Get Drag mode.
func (c *TCheckListBox) DragMode() TDragMode {
	return CheckListBox_GetDragMode(c.instance)
}

// 设置拖拽模式。
//
// Set Drag mode.
func (c *TCheckListBox) SetDragMode(value TDragMode) {
	CheckListBox_SetDragMode(c.instance, value)
}

// 获取控件启用。
//
// Get the control enabled.
func (c *TCheckListBox) Enabled() bool {
	return CheckListBox_GetEnabled(c.instance)
}

// 设置控件启用。
//
// Set the control enabled.
func (c *TCheckListBox) SetEnabled(value bool) {
	CheckListBox_SetEnabled(c.instance, value)
}

// 获取字体。
//
// Get Font.
func (c *TCheckListBox) Font() *TFont {
	return AsFont(CheckListBox_GetFont(c.instance))
}

// 设置字体。
//
// Set Font.
func (c *TCheckListBox) SetFont(value *TFont) {
	CheckListBox_SetFont(c.instance, CheckPtr(value))
}

func (c *TCheckListBox) ItemHeight() int32 {
	return CheckListBox_GetItemHeight(c.instance)
}

func (c *TCheckListBox) SetItemHeight(value int32) {
	CheckListBox_SetItemHeight(c.instance, value)
}

func (c *TCheckListBox) Items() *TStrings {
	return AsStrings(CheckListBox_GetItems(c.instance))
}

func (c *TCheckListBox) SetItems(value IStrings) {
	CheckListBox_SetItems(c.instance, CheckPtr(value))
}

// 获取使用父容器颜色。
//
// Get parent color.
func (c *TCheckListBox) ParentColor() bool {
	return CheckListBox_GetParentColor(c.instance)
}

// 设置使用父容器颜色。
//
// Set parent color.
func (c *TCheckListBox) SetParentColor(value bool) {
	CheckListBox_SetParentColor(c.instance, value)
}

// 获取使用父容器双缓冲。
//
// Get Parent container double buffering.
func (c *TCheckListBox) ParentDoubleBuffered() bool {
	return CheckListBox_GetParentDoubleBuffered(c.instance)
}

// 设置使用父容器双缓冲。
//
// Set Parent container double buffering.
func (c *TCheckListBox) SetParentDoubleBuffered(value bool) {
	CheckListBox_SetParentDoubleBuffered(c.instance, value)
}

// 获取使用父容器字体。
//
// Get Parent container font.
func (c *TCheckListBox) ParentFont() bool {
	return CheckListBox_GetParentFont(c.instance)
}

// 设置使用父容器字体。
//
// Set Parent container font.
func (c *TCheckListBox) SetParentFont(value bool) {
	CheckListBox_SetParentFont(c.instance, value)
}

// 获取以父容器的ShowHint属性为准。
func (c *TCheckListBox) ParentShowHint() bool {
	return CheckListBox_GetParentShowHint(c.instance)
}

// 设置以父容器的ShowHint属性为准。
func (c *TCheckListBox) SetParentShowHint(value bool) {
	CheckListBox_SetParentShowHint(c.instance, value)
}

// 获取右键菜单。
//
// Get Right click menu.
func (c *TCheckListBox) PopupMenu() *TPopupMenu {
	return AsPopupMenu(CheckListBox_GetPopupMenu(c.instance))
}

// 设置右键菜单。
//
// Set Right click menu.
func (c *TCheckListBox) SetPopupMenu(value IComponent) {
	CheckListBox_SetPopupMenu(c.instance, CheckPtr(value))
}

// 获取显示鼠标悬停提示。
//
// Get Show mouseover tips.
func (c *TCheckListBox) ShowHint() bool {
	return CheckListBox_GetShowHint(c.instance)
}

// 设置显示鼠标悬停提示。
//
// Set Show mouseover tips.
func (c *TCheckListBox) SetShowHint(value bool) {
	CheckListBox_SetShowHint(c.instance, value)
}

func (c *TCheckListBox) Sorted() bool {
	return CheckListBox_GetSorted(c.instance)
}

func (c *TCheckListBox) SetSorted(value bool) {
	CheckListBox_SetSorted(c.instance, value)
}

func (c *TCheckListBox) Style() TListBoxStyle {
	return CheckListBox_GetStyle(c.instance)
}

func (c *TCheckListBox) SetStyle(value TListBoxStyle) {
	CheckListBox_SetStyle(c.instance, value)
}

// 获取Tab切换顺序序号。
//
// Get Tab switching sequence number.
func (c *TCheckListBox) TabOrder() TTabOrder {
	return CheckListBox_GetTabOrder(c.instance)
}

// 设置Tab切换顺序序号。
//
// Set Tab switching sequence number.
func (c *TCheckListBox) SetTabOrder(value TTabOrder) {
	CheckListBox_SetTabOrder(c.instance, value)
}

// 获取Tab可停留。
//
// Get Tab can stay.
func (c *TCheckListBox) TabStop() bool {
	return CheckListBox_GetTabStop(c.instance)
}

// 设置Tab可停留。
//
// Set Tab can stay.
func (c *TCheckListBox) SetTabStop(value bool) {
	CheckListBox_SetTabStop(c.instance, value)
}

// 获取控件可视。
//
// Get the control visible.
func (c *TCheckListBox) Visible() bool {
	return CheckListBox_GetVisible(c.instance)
}

// 设置控件可视。
//
// Set the control visible.
func (c *TCheckListBox) SetVisible(value bool) {
	CheckListBox_SetVisible(c.instance, value)
}

// 设置控件单击事件。
//
// Set control click event.
func (c *TCheckListBox) SetOnClick(fn TNotifyEvent) {
	CheckListBox_SetOnClick(c.instance, fn)
}

// 设置上下文弹出事件，一般是右键时弹出。
//
// Set Context popup event, usually pop up when right click.
func (c *TCheckListBox) SetOnContextPopup(fn TContextPopupEvent) {
	CheckListBox_SetOnContextPopup(c.instance, fn)
}

// 设置双击事件。
func (c *TCheckListBox) SetOnDblClick(fn TNotifyEvent) {
	CheckListBox_SetOnDblClick(c.instance, fn)
}

// 设置拖拽下落事件。
//
// Set Drag and drop event.
func (c *TCheckListBox) SetOnDragDrop(fn TDragDropEvent) {
	CheckListBox_SetOnDragDrop(c.instance, fn)
}

// 设置拖拽完成事件。
//
// Set Drag and drop completion event.
func (c *TCheckListBox) SetOnDragOver(fn TDragOverEvent) {
	CheckListBox_SetOnDragOver(c.instance, fn)
}

// 设置拖拽结束。
//
// Set End of drag.
func (c *TCheckListBox) SetOnEndDrag(fn TEndDragEvent) {
	CheckListBox_SetOnEndDrag(c.instance, fn)
}

// 设置焦点进入。
//
// Set Focus entry.
func (c *TCheckListBox) SetOnEnter(fn TNotifyEvent) {
	CheckListBox_SetOnEnter(c.instance, fn)
}

// 设置焦点退出。
//
// Set Focus exit.
func (c *TCheckListBox) SetOnExit(fn TNotifyEvent) {
	CheckListBox_SetOnExit(c.instance, fn)
}

// 设置键盘按键按下事件。
//
// Set Keyboard button press event.
func (c *TCheckListBox) SetOnKeyDown(fn TKeyEvent) {
	CheckListBox_SetOnKeyDown(c.instance, fn)
}

// 设置键键下事件。
func (c *TCheckListBox) SetOnKeyPress(fn TKeyPressEvent) {
	CheckListBox_SetOnKeyPress(c.instance, fn)
}

// 设置键盘按键抬起事件。
//
// Set Keyboard button lift event.
func (c *TCheckListBox) SetOnKeyUp(fn TKeyEvent) {
	CheckListBox_SetOnKeyUp(c.instance, fn)
}

func (c *TCheckListBox) SetOnMeasureItem(fn TMeasureItemEvent) {
	CheckListBox_SetOnMeasureItem(c.instance, fn)
}

// 设置鼠标按下事件。
//
// Set Mouse down event.
func (c *TCheckListBox) SetOnMouseDown(fn TMouseEvent) {
	CheckListBox_SetOnMouseDown(c.instance, fn)
}

// 设置鼠标进入事件。
//
// Set Mouse entry event.
func (c *TCheckListBox) SetOnMouseEnter(fn TNotifyEvent) {
	CheckListBox_SetOnMouseEnter(c.instance, fn)
}

// 设置鼠标离开事件。
//
// Set Mouse leave event.
func (c *TCheckListBox) SetOnMouseLeave(fn TNotifyEvent) {
	CheckListBox_SetOnMouseLeave(c.instance, fn)
}

// 设置鼠标移动事件。
func (c *TCheckListBox) SetOnMouseMove(fn TMouseMoveEvent) {
	CheckListBox_SetOnMouseMove(c.instance, fn)
}

// 设置鼠标抬起事件。
//
// Set Mouse lift event.
func (c *TCheckListBox) SetOnMouseUp(fn TMouseEvent) {
	CheckListBox_SetOnMouseUp(c.instance, fn)
}

// 获取画布。
func (c *TCheckListBox) Canvas() *TCanvas {
	return AsCanvas(CheckListBox_GetCanvas(c.instance))
}

func (c *TCheckListBox) Count() int32 {
	return CheckListBox_GetCount(c.instance)
}

func (c *TCheckListBox) TopIndex() int32 {
	return CheckListBox_GetTopIndex(c.instance)
}

func (c *TCheckListBox) SetTopIndex(value int32) {
	CheckListBox_SetTopIndex(c.instance, value)
}

func (c *TCheckListBox) MultiSelect() bool {
	return CheckListBox_GetMultiSelect(c.instance)
}

func (c *TCheckListBox) SetMultiSelect(value bool) {
	CheckListBox_SetMultiSelect(c.instance, value)
}

func (c *TCheckListBox) SelCount() int32 {
	return CheckListBox_GetSelCount(c.instance)
}

func (c *TCheckListBox) ItemIndex() int32 {
	return CheckListBox_GetItemIndex(c.instance)
}

func (c *TCheckListBox) SetItemIndex(value int32) {
	CheckListBox_SetItemIndex(c.instance, value)
}

// 获取依靠客户端总数。
func (c *TCheckListBox) DockClientCount() int32 {
	return CheckListBox_GetDockClientCount(c.instance)
}

// 获取停靠站点。
//
// Get Docking site.
func (c *TCheckListBox) DockSite() bool {
	return CheckListBox_GetDockSite(c.instance)
}

// 设置停靠站点。
//
// Set Docking site.
func (c *TCheckListBox) SetDockSite(value bool) {
	CheckListBox_SetDockSite(c.instance, value)
}

// 获取鼠标是否在客户端，仅VCL有效。
//
// Get Whether the mouse is on the client, only VCL is valid.
func (c *TCheckListBox) MouseInClient() bool {
	return CheckListBox_GetMouseInClient(c.instance)
}

// 获取当前停靠的可视总数。
//
// Get The total number of visible calls currently docked.
func (c *TCheckListBox) VisibleDockClientCount() int32 {
	return CheckListBox_GetVisibleDockClientCount(c.instance)
}

// 获取画刷对象。
//
// Get Brush.
func (c *TCheckListBox) Brush() *TBrush {
	return AsBrush(CheckListBox_GetBrush(c.instance))
}

// 获取子控件数。
//
// Get Number of child controls.
func (c *TCheckListBox) ControlCount() int32 {
	return CheckListBox_GetControlCount(c.instance)
}

// 获取控件句柄。
//
// Get Control handle.
func (c *TCheckListBox) Handle() HWND {
	return CheckListBox_GetHandle(c.instance)
}

// 获取父容器句柄。
//
// Get Parent container handle.
func (c *TCheckListBox) ParentWindow() HWND {
	return CheckListBox_GetParentWindow(c.instance)
}

// 设置父容器句柄。
//
// Set Parent container handle.
func (c *TCheckListBox) SetParentWindow(value HWND) {
	CheckListBox_SetParentWindow(c.instance, value)
}

func (c *TCheckListBox) Showing() bool {
	return CheckListBox_GetShowing(c.instance)
}

// 获取使用停靠管理。
func (c *TCheckListBox) UseDockManager() bool {
	return CheckListBox_GetUseDockManager(c.instance)
}

// 设置使用停靠管理。
func (c *TCheckListBox) SetUseDockManager(value bool) {
	CheckListBox_SetUseDockManager(c.instance, value)
}

func (c *TCheckListBox) Action() *TAction {
	return AsAction(CheckListBox_GetAction(c.instance))
}

func (c *TCheckListBox) SetAction(value IComponent) {
	CheckListBox_SetAction(c.instance, CheckPtr(value))
}

func (c *TCheckListBox) BoundsRect() TRect {
	return CheckListBox_GetBoundsRect(c.instance)
}

func (c *TCheckListBox) SetBoundsRect(value TRect) {
	CheckListBox_SetBoundsRect(c.instance, value)
}

// 获取客户区高度。
//
// Get client height.
func (c *TCheckListBox) ClientHeight() int32 {
	return CheckListBox_GetClientHeight(c.instance)
}

// 设置客户区高度。
//
// Set client height.
func (c *TCheckListBox) SetClientHeight(value int32) {
	CheckListBox_SetClientHeight(c.instance, value)
}

func (c *TCheckListBox) ClientOrigin() TPoint {
	return CheckListBox_GetClientOrigin(c.instance)
}

// 获取客户区矩形。
//
// Get client rectangle.
func (c *TCheckListBox) ClientRect() TRect {
	return CheckListBox_GetClientRect(c.instance)
}

// 获取客户区宽度。
//
// Get client width.
func (c *TCheckListBox) ClientWidth() int32 {
	return CheckListBox_GetClientWidth(c.instance)
}

// 设置客户区宽度。
//
// Set client width.
func (c *TCheckListBox) SetClientWidth(value int32) {
	CheckListBox_SetClientWidth(c.instance, value)
}

// 获取控件状态。
//
// Get control state.
func (c *TCheckListBox) ControlState() TControlState {
	return CheckListBox_GetControlState(c.instance)
}

// 设置控件状态。
//
// Set control state.
func (c *TCheckListBox) SetControlState(value TControlState) {
	CheckListBox_SetControlState(c.instance, value)
}

// 获取控件样式。
//
// Get control style.
func (c *TCheckListBox) ControlStyle() TControlStyle {
	return CheckListBox_GetControlStyle(c.instance)
}

// 设置控件样式。
//
// Set control style.
func (c *TCheckListBox) SetControlStyle(value TControlStyle) {
	CheckListBox_SetControlStyle(c.instance, value)
}

func (c *TCheckListBox) Floating() bool {
	return CheckListBox_GetFloating(c.instance)
}

// 获取控件父容器。
//
// Get control parent container.
func (c *TCheckListBox) Parent() *TWinControl {
	return AsWinControl(CheckListBox_GetParent(c.instance))
}

// 设置控件父容器。
//
// Set control parent container.
func (c *TCheckListBox) SetParent(value IWinControl) {
	CheckListBox_SetParent(c.instance, CheckPtr(value))
}

// 获取左边位置。
//
// Get Left position.
func (c *TCheckListBox) Left() int32 {
	return CheckListBox_GetLeft(c.instance)
}

// 设置左边位置。
//
// Set Left position.
func (c *TCheckListBox) SetLeft(value int32) {
	CheckListBox_SetLeft(c.instance, value)
}

// 获取顶边位置。
//
// Get Top position.
func (c *TCheckListBox) Top() int32 {
	return CheckListBox_GetTop(c.instance)
}

// 设置顶边位置。
//
// Set Top position.
func (c *TCheckListBox) SetTop(value int32) {
	CheckListBox_SetTop(c.instance, value)
}

// 获取宽度。
//
// Get width.
func (c *TCheckListBox) Width() int32 {
	return CheckListBox_GetWidth(c.instance)
}

// 设置宽度。
//
// Set width.
func (c *TCheckListBox) SetWidth(value int32) {
	CheckListBox_SetWidth(c.instance, value)
}

// 获取高度。
//
// Get height.
func (c *TCheckListBox) Height() int32 {
	return CheckListBox_GetHeight(c.instance)
}

// 设置高度。
//
// Set height.
func (c *TCheckListBox) SetHeight(value int32) {
	CheckListBox_SetHeight(c.instance, value)
}

// 获取控件光标。
//
// Get control cursor.
func (c *TCheckListBox) Cursor() TCursor {
	return CheckListBox_GetCursor(c.instance)
}

// 设置控件光标。
//
// Set control cursor.
func (c *TCheckListBox) SetCursor(value TCursor) {
	CheckListBox_SetCursor(c.instance, value)
}

// 获取组件鼠标悬停提示。
//
// Get component mouse hints.
func (c *TCheckListBox) Hint() string {
	return CheckListBox_GetHint(c.instance)
}

// 设置组件鼠标悬停提示。
//
// Set component mouse hints.
func (c *TCheckListBox) SetHint(value string) {
	CheckListBox_SetHint(c.instance, value)
}

// 获取组件总数。
//
// Get the total number of components.
func (c *TCheckListBox) ComponentCount() int32 {
	return CheckListBox_GetComponentCount(c.instance)
}

// 获取组件索引。
//
// Get component index.
func (c *TCheckListBox) ComponentIndex() int32 {
	return CheckListBox_GetComponentIndex(c.instance)
}

// 设置组件索引。
//
// Set component index.
func (c *TCheckListBox) SetComponentIndex(value int32) {
	CheckListBox_SetComponentIndex(c.instance, value)
}

// 获取组件所有者。
//
// Get component owner.
func (c *TCheckListBox) Owner() *TComponent {
	return AsComponent(CheckListBox_GetOwner(c.instance))
}

// 获取组件名称。
//
// Get the component name.
func (c *TCheckListBox) Name() string {
	return CheckListBox_GetName(c.instance)
}

// 设置组件名称。
//
// Set the component name.
func (c *TCheckListBox) SetName(value string) {
	CheckListBox_SetName(c.instance, value)
}

// 获取对象标记。
//
// Get the control tag.
func (c *TCheckListBox) Tag() int {
	return CheckListBox_GetTag(c.instance)
}

// 设置对象标记。
//
// Set the control tag.
func (c *TCheckListBox) SetTag(value int) {
	CheckListBox_SetTag(c.instance, value)
}

// 获取左边锚点。
func (c *TCheckListBox) AnchorSideLeft() *TAnchorSide {
	return AsAnchorSide(CheckListBox_GetAnchorSideLeft(c.instance))
}

// 设置左边锚点。
func (c *TCheckListBox) SetAnchorSideLeft(value *TAnchorSide) {
	CheckListBox_SetAnchorSideLeft(c.instance, CheckPtr(value))
}

// 获取顶边锚点。
func (c *TCheckListBox) AnchorSideTop() *TAnchorSide {
	return AsAnchorSide(CheckListBox_GetAnchorSideTop(c.instance))
}

// 设置顶边锚点。
func (c *TCheckListBox) SetAnchorSideTop(value *TAnchorSide) {
	CheckListBox_SetAnchorSideTop(c.instance, CheckPtr(value))
}

// 获取右边锚点。
func (c *TCheckListBox) AnchorSideRight() *TAnchorSide {
	return AsAnchorSide(CheckListBox_GetAnchorSideRight(c.instance))
}

// 设置右边锚点。
func (c *TCheckListBox) SetAnchorSideRight(value *TAnchorSide) {
	CheckListBox_SetAnchorSideRight(c.instance, CheckPtr(value))
}

// 获取底边锚点。
func (c *TCheckListBox) AnchorSideBottom() *TAnchorSide {
	return AsAnchorSide(CheckListBox_GetAnchorSideBottom(c.instance))
}

// 设置底边锚点。
func (c *TCheckListBox) SetAnchorSideBottom(value *TAnchorSide) {
	CheckListBox_SetAnchorSideBottom(c.instance, CheckPtr(value))
}

func (c *TCheckListBox) ChildSizing() *TControlChildSizing {
	return AsControlChildSizing(CheckListBox_GetChildSizing(c.instance))
}

func (c *TCheckListBox) SetChildSizing(value *TControlChildSizing) {
	CheckListBox_SetChildSizing(c.instance, CheckPtr(value))
}

// 获取边框间距。
func (c *TCheckListBox) BorderSpacing() *TControlBorderSpacing {
	return AsControlBorderSpacing(CheckListBox_GetBorderSpacing(c.instance))
}

// 设置边框间距。
func (c *TCheckListBox) SetBorderSpacing(value *TControlBorderSpacing) {
	CheckListBox_SetBorderSpacing(c.instance, CheckPtr(value))
}

// 获取是否选中。
func (c *TCheckListBox) Checked(Index int32) bool {
	return CheckListBox_GetChecked(c.instance, Index)
}

// 设置是否选中。
func (c *TCheckListBox) SetChecked(Index int32, value bool) {
	CheckListBox_SetChecked(c.instance, Index, value)
}

func (c *TCheckListBox) ItemEnabled(Index int32) bool {
	return CheckListBox_GetItemEnabled(c.instance, Index)
}

func (c *TCheckListBox) SetItemEnabled(Index int32, value bool) {
	CheckListBox_SetItemEnabled(c.instance, Index, value)
}

func (c *TCheckListBox) State(Index int32) TCheckBoxState {
	return CheckListBox_GetState(c.instance, Index)
}

func (c *TCheckListBox) SetState(Index int32, value TCheckBoxState) {
	CheckListBox_SetState(c.instance, Index, value)
}

func (c *TCheckListBox) Header(Index int32) bool {
	return CheckListBox_GetHeader(c.instance, Index)
}

func (c *TCheckListBox) SetHeader(Index int32, value bool) {
	CheckListBox_SetHeader(c.instance, Index, value)
}

func (c *TCheckListBox) Selected(Index int32) bool {
	return CheckListBox_GetSelected(c.instance, Index)
}

func (c *TCheckListBox) SetSelected(Index int32, value bool) {
	CheckListBox_SetSelected(c.instance, Index, value)
}

// 获取指定索引停靠客户端。
func (c *TCheckListBox) DockClients(Index int32) *TControl {
	return AsControl(CheckListBox_GetDockClients(c.instance, Index))
}

// 获取指定索引子控件。
func (c *TCheckListBox) Controls(Index int32) *TControl {
	return AsControl(CheckListBox_GetControls(c.instance, Index))
}

// 获取指定索引组件。
//
// Get the specified index component.
func (c *TCheckListBox) Components(AIndex int32) *TComponent {
	return AsComponent(CheckListBox_GetComponents(c.instance, AIndex))
}

// 获取锚侧面。
func (c *TCheckListBox) AnchorSide(AKind TAnchorKind) *TAnchorSide {
	return AsAnchorSide(CheckListBox_GetAnchorSide(c.instance, AKind))
}

