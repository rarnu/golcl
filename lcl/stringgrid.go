//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	. "github.com/rarnu/golcl/lcl/api"
	. "github.com/rarnu/golcl/lcl/types"
	"unsafe"
)

type TStringGrid struct {
	IWinControl
	instance uintptr
	// 特殊情况下使用，主要应对Go的GC问题，与LCL没有太多关系。
	ptr unsafe.Pointer
}

// 创建一个新的对象。
//
// Create a new object.
func NewStringGrid(owner IComponent) *TStringGrid {
	s := new(TStringGrid)
	s.instance = StringGrid_Create(CheckPtr(owner))
	s.ptr = unsafe.Pointer(s.instance)
	return s
}

// 动态转换一个已存在的对象实例。
//
// Dynamically convert an existing object instance.
func AsStringGrid(obj any) *TStringGrid {
	instance, ptr := getInstance(obj)
	if instance == 0 {
		return nil
	}
	return &TStringGrid{instance: instance, ptr: ptr}
}

// -------------------------- Deprecated begin --------------------------
// 新建一个对象来自已经存在的对象实例指针。
//
// Create a new object from an existing object instance pointer.
// Deprecated: use AsStringGrid.
func StringGridFromInst(inst uintptr) *TStringGrid {
	return AsStringGrid(inst)
}

// 新建一个对象来自已经存在的对象实例。
//
// Create a new object from an existing object instance.
// Deprecated: use AsStringGrid.
func StringGridFromObj(obj IObject) *TStringGrid {
	return AsStringGrid(obj)
}

// 新建一个对象来自不安全的地址。注意：使用此函数可能造成一些不明情况，慎用。
//
// Create a new object from an unsecured address. Note: Using this function may cause some unclear situations and be used with caution..
// Deprecated: use AsStringGrid.
func StringGridFromUnsafePointer(ptr unsafe.Pointer) *TStringGrid {
	return AsStringGrid(ptr)
}

// -------------------------- Deprecated end --------------------------
// 释放对象。
//
// Free object.
func (s *TStringGrid) Free() {
	if s.instance != 0 {
		StringGrid_Free(s.instance)
		s.instance, s.ptr = 0, nullptr
	}
}

// 返回对象实例指针。
//
// Return object instance pointer.
func (s *TStringGrid) Instance() uintptr {
	return s.instance
}

// 获取一个不安全的地址。
//
// Get an unsafe address.
func (s *TStringGrid) UnsafeAddr() unsafe.Pointer {
	return s.ptr
}

// 检测地址是否为空。
//
// Check if the address is empty.
func (s *TStringGrid) IsValid() bool {
	return s.instance != 0
}

// 检测当前对象是否继承自目标对象。
//
// Checks whether the current object is inherited from the target object.
func (s *TStringGrid) Is() TIs {
	return TIs(s.instance)
}

// 动态转换当前对象为目标对象。
//
// Dynamically convert the current object to the target object.
//func (s *TStringGrid) As() TAs {
//    return TAs(s.instance)
//}

// 获取类信息指针。
//
// Get class information pointer.
func TStringGridClass() TClass {
	return StringGrid_StaticClassType()
}

func (s *TStringGrid) DeleteColRow(IsColumn bool, index int32) {
	StringGrid_DeleteColRow(s.instance, IsColumn, index)
}

func (s *TStringGrid) DeleteCol(Index int32) {
	StringGrid_DeleteCol(s.instance, Index)
}

func (s *TStringGrid) DeleteRow(Index int32) {
	StringGrid_DeleteRow(s.instance, Index)
}

func (s *TStringGrid) ExchangeColRow(IsColumn bool, index int32, WithIndex int32) {
	StringGrid_ExchangeColRow(s.instance, IsColumn, index, WithIndex)
}

func (s *TStringGrid) InsertColRow(IsColumn bool, index int32) {
	StringGrid_InsertColRow(s.instance, IsColumn, index)
}

func (s *TStringGrid) MoveColRow(IsColumn bool, FromIndex int32, ToIndex int32) {
	StringGrid_MoveColRow(s.instance, IsColumn, FromIndex, ToIndex)
}

func (s *TStringGrid) SortColRow(IsColumn bool, Index int32, FromIndex int32, ToIndex int32) {
	StringGrid_SortColRow(s.instance, IsColumn, Index, FromIndex, ToIndex)
}

func (s *TStringGrid) EditorByStyle(Style TColumnButtonStyle) *TWinControl {
	return AsWinControl(StringGrid_EditorByStyle(s.instance, Style))
}

func (s *TStringGrid) EditorKeyDown(Sender IObject, Key *uint16, Shift TShiftState) {
	StringGrid_EditorKeyDown(s.instance, CheckPtr(Sender), Key, Shift)
}

func (s *TStringGrid) EditorKeyPress(Sender IObject, Key *uint16) {
	StringGrid_EditorKeyPress(s.instance, CheckPtr(Sender), Key)
}

func (s *TStringGrid) EditorKeyUp(Sender IObject, key *uint16, shift TShiftState) {
	StringGrid_EditorKeyUp(s.instance, CheckPtr(Sender), key, shift)
}

func (s *TStringGrid) EditorTextChanged(aCol int32, aRow int32, aText string) {
	StringGrid_EditorTextChanged(s.instance, aCol, aRow, aText)
}

func (s *TStringGrid) EditingDone() {
	StringGrid_EditingDone(s.instance)
}

func (s *TStringGrid) AutoAdjustColumns() {
	StringGrid_AutoAdjustColumns(s.instance)
}

func (s *TStringGrid) CellRect(ACol int32, ARow int32) TRect {
	return StringGrid_CellRect(s.instance, ACol, ARow)
}

func (s *TStringGrid) CellToGridZone(aCol int32, aRow int32) TGridZone {
	return StringGrid_CellToGridZone(s.instance, aCol, aRow)
}

func (s *TStringGrid) CheckPosition() {
	StringGrid_CheckPosition(s.instance)
}

func (s *TStringGrid) ClearCols() bool {
	return StringGrid_ClearCols(s.instance)
}

func (s *TStringGrid) ClearRows() bool {
	return StringGrid_ClearRows(s.instance)
}

// 清除。
func (s *TStringGrid) Clear() {
	StringGrid_Clear(s.instance)
}

func (s *TStringGrid) ClearSelections() {
	StringGrid_ClearSelections(s.instance)
}

func (s *TStringGrid) HasMultiSelection() bool {
	return StringGrid_HasMultiSelection(s.instance)
}

func (s *TStringGrid) InvalidateCell(aCol int32, aRow int32) {
	StringGrid_InvalidateCell(s.instance, aCol, aRow)
}

func (s *TStringGrid) InvalidateCol(ACol int32) {
	StringGrid_InvalidateCol(s.instance, ACol)
}

func (s *TStringGrid) InvalidateRange(aRange TRect) {
	StringGrid_InvalidateRange(s.instance, aRange)
}

func (s *TStringGrid) InvalidateRow(ARow int32) {
	StringGrid_InvalidateRow(s.instance, ARow)
}

func (s *TStringGrid) IsCellVisible(aCol int32, aRow int32) bool {
	return StringGrid_IsCellVisible(s.instance, aCol, aRow)
}

func (s *TStringGrid) IsFixedCellVisible(aCol int32, aRow int32) bool {
	return StringGrid_IsFixedCellVisible(s.instance, aCol, aRow)
}

func (s *TStringGrid) MouseCoord(X int32, Y int32) TGridCoord {
	return StringGrid_MouseCoord(s.instance, X, Y)
}

func (s *TStringGrid) MouseToCell(Mouse TPoint) TPoint {
	return StringGrid_MouseToCell(s.instance, Mouse)
}

func (s *TStringGrid) MouseToLogcell(Mouse TPoint) TPoint {
	return StringGrid_MouseToLogcell(s.instance, Mouse)
}

func (s *TStringGrid) MouseToGridZone(X int32, Y int32) TGridZone {
	return StringGrid_MouseToGridZone(s.instance, X, Y)
}

// 是否可以获得焦点。
func (s *TStringGrid) CanFocus() bool {
	return StringGrid_CanFocus(s.instance)
}

// 返回是否包含指定控件。
//
// it's contain a specified control.
func (s *TStringGrid) ContainsControl(Control IControl) bool {
	return StringGrid_ContainsControl(s.instance, CheckPtr(Control))
}

// 返回指定坐标及相关属性位置控件。
//
// Returns the specified coordinate and the relevant attribute position control..
func (s *TStringGrid) ControlAtPos(Pos TPoint, AllowDisabled bool, AllowWinControls bool, AllLevels bool) *TControl {
	return AsControl(StringGrid_ControlAtPos(s.instance, Pos, AllowDisabled, AllowWinControls, AllLevels))
}

// 禁用控件的对齐。
//
// Disable control alignment.
func (s *TStringGrid) DisableAlign() {
	StringGrid_DisableAlign(s.instance)
}

// 启用控件对齐。
//
// Enabled control alignment.
func (s *TStringGrid) EnableAlign() {
	StringGrid_EnableAlign(s.instance)
}

// 查找子控件。
//
// Find sub controls.
func (s *TStringGrid) FindChildControl(ControlName string) *TControl {
	return AsControl(StringGrid_FindChildControl(s.instance, ControlName))
}

func (s *TStringGrid) FlipChildren(AllLevels bool) {
	StringGrid_FlipChildren(s.instance, AllLevels)
}

// 返回是否获取焦点。
//
// Return to get focus.
func (s *TStringGrid) Focused() bool {
	return StringGrid_Focused(s.instance)
}

// 句柄是否已经分配。
//
// Is the handle already allocated.
func (s *TStringGrid) HandleAllocated() bool {
	return StringGrid_HandleAllocated(s.instance)
}

// 插入一个控件。
//
// Insert a control.
func (s *TStringGrid) InsertControl(AControl IControl) {
	StringGrid_InsertControl(s.instance, CheckPtr(AControl))
}

// 要求重绘。
//
// Redraw.
func (s *TStringGrid) Invalidate() {
	StringGrid_Invalidate(s.instance)
}

// 绘画至指定DC。
//
// Painting to the specified DC.
func (s *TStringGrid) PaintTo(DC HDC, X int32, Y int32) {
	StringGrid_PaintTo(s.instance, DC, X, Y)
}

// 移除一个控件。
//
// Remove a control.
func (s *TStringGrid) RemoveControl(AControl IControl) {
	StringGrid_RemoveControl(s.instance, CheckPtr(AControl))
}

// 重新对齐。
//
// Realign.
func (s *TStringGrid) Realign() {
	StringGrid_Realign(s.instance)
}

// 重绘。
//
// Repaint.
func (s *TStringGrid) Repaint() {
	StringGrid_Repaint(s.instance)
}

// 按比例缩放。
//
// Scale by.
func (s *TStringGrid) ScaleBy(M int32, D int32) {
	StringGrid_ScaleBy(s.instance, M, D)
}

// 滚动至指定位置。
//
// Scroll by.
func (s *TStringGrid) ScrollBy(DeltaX int32, DeltaY int32) {
	StringGrid_ScrollBy(s.instance, DeltaX, DeltaY)
}

// 设置组件边界。
//
// Set component boundaries.
func (s *TStringGrid) SetBounds(ALeft int32, ATop int32, AWidth int32, AHeight int32) {
	StringGrid_SetBounds(s.instance, ALeft, ATop, AWidth, AHeight)
}

// 设置控件焦点。
//
// Set control focus.
func (s *TStringGrid) SetFocus() {
	StringGrid_SetFocus(s.instance)
}

// 控件更新。
//
// Update.
func (s *TStringGrid) Update() {
	StringGrid_Update(s.instance)
}

// 将控件置于最前。
//
// Bring the control to the front.
func (s *TStringGrid) BringToFront() {
	StringGrid_BringToFront(s.instance)
}

// 将客户端坐标转为绝对的屏幕坐标。
//
// Convert client coordinates to absolute screen coordinates.
func (s *TStringGrid) ClientToScreen(Point TPoint) TPoint {
	return StringGrid_ClientToScreen(s.instance, Point)
}

// 将客户端坐标转为父容器坐标。
//
// Convert client coordinates to parent container coordinates.
func (s *TStringGrid) ClientToParent(Point TPoint, AParent IWinControl) TPoint {
	return StringGrid_ClientToParent(s.instance, Point, CheckPtr(AParent))
}

// 是否在拖拽中。
//
// Is it in the middle of dragging.
func (s *TStringGrid) Dragging() bool {
	return StringGrid_Dragging(s.instance)
}

// 是否有父容器。
//
// Is there a parent container.
func (s *TStringGrid) HasParent() bool {
	return StringGrid_HasParent(s.instance)
}

// 隐藏控件。
//
// Hidden control.
func (s *TStringGrid) Hide() {
	StringGrid_Hide(s.instance)
}

// 发送一个消息。
//
// Send a message.
func (s *TStringGrid) Perform(Msg uint32, WParam uintptr, LParam int) int {
	return StringGrid_Perform(s.instance, Msg, WParam, LParam)
}

// 刷新控件。
//
// Refresh control.
func (s *TStringGrid) Refresh() {
	StringGrid_Refresh(s.instance)
}

// 将屏幕坐标转为客户端坐标。
//
// Convert screen coordinates to client coordinates.
func (s *TStringGrid) ScreenToClient(Point TPoint) TPoint {
	return StringGrid_ScreenToClient(s.instance, Point)
}

// 将父容器坐标转为客户端坐标。
//
// Convert parent container coordinates to client coordinates.
func (s *TStringGrid) ParentToClient(Point TPoint, AParent IWinControl) TPoint {
	return StringGrid_ParentToClient(s.instance, Point, CheckPtr(AParent))
}

// 控件至于最后面。
//
// The control is placed at the end.
func (s *TStringGrid) SendToBack() {
	StringGrid_SendToBack(s.instance)
}

// 显示控件。
//
// Show control.
func (s *TStringGrid) Show() {
	StringGrid_Show(s.instance)
}

// 获取控件的字符，如果有。
//
// Get the characters of the control, if any.
func (s *TStringGrid) GetTextBuf(Buffer *string, BufSize int32) int32 {
	return StringGrid_GetTextBuf(s.instance, Buffer, BufSize)
}

// 获取控件的字符长，如果有。
//
// Get the character length of the control, if any.
func (s *TStringGrid) GetTextLen() int32 {
	return StringGrid_GetTextLen(s.instance)
}

// 设置控件字符，如果有。
//
// Set control characters, if any.
func (s *TStringGrid) SetTextBuf(Buffer string) {
	StringGrid_SetTextBuf(s.instance, Buffer)
}

// 查找指定名称的组件。
//
// Find the component with the specified name.
func (s *TStringGrid) FindComponent(AName string) *TComponent {
	return AsComponent(StringGrid_FindComponent(s.instance, AName))
}

// 获取类名路径。
//
// Get the class name path.
func (s *TStringGrid) GetNamePath() string {
	return StringGrid_GetNamePath(s.instance)
}

// 复制一个对象，如果对象实现了此方法的话。
//
// Copy an object, if the object implements this method.
func (s *TStringGrid) Assign(Source IObject) {
	StringGrid_Assign(s.instance, CheckPtr(Source))
}

// 获取类的类型信息。
//
// Get class type information.
func (s *TStringGrid) ClassType() TClass {
	return StringGrid_ClassType(s.instance)
}

// 获取当前对象类名称。
//
// Get the current object class name.
func (s *TStringGrid) ClassName() string {
	return StringGrid_ClassName(s.instance)
}

// 获取当前对象实例大小。
//
// Get the current object instance size.
func (s *TStringGrid) InstanceSize() int32 {
	return StringGrid_InstanceSize(s.instance)
}

// 判断当前类是否继承自指定类。
//
// Determine whether the current class inherits from the specified class.
func (s *TStringGrid) InheritsFrom(AClass TClass) bool {
	return StringGrid_InheritsFrom(s.instance, AClass)
}

// 与一个对象进行比较。
//
// Compare with an object.
func (s *TStringGrid) Equals(Obj IObject) bool {
	return StringGrid_Equals(s.instance, CheckPtr(Obj))
}

// 获取类的哈希值。
//
// Get the hash value of the class.
func (s *TStringGrid) GetHashCode() int32 {
	return StringGrid_GetHashCode(s.instance)
}

// 文本类信息。
//
// Text information.
func (s *TStringGrid) ToString() string {
	return StringGrid_ToString(s.instance)
}

func (s *TStringGrid) AnchorToNeighbour(ASide TAnchorKind, ASpace int32, ASibling IControl) {
	StringGrid_AnchorToNeighbour(s.instance, ASide, ASpace, CheckPtr(ASibling))
}

func (s *TStringGrid) AnchorParallel(ASide TAnchorKind, ASpace int32, ASibling IControl) {
	StringGrid_AnchorParallel(s.instance, ASide, ASpace, CheckPtr(ASibling))
}

// 置于指定控件的横向中心。
func (s *TStringGrid) AnchorHorizontalCenterTo(ASibling IControl) {
	StringGrid_AnchorHorizontalCenterTo(s.instance, CheckPtr(ASibling))
}

// 置于指定控件的纵向中心。
func (s *TStringGrid) AnchorVerticalCenterTo(ASibling IControl) {
	StringGrid_AnchorVerticalCenterTo(s.instance, CheckPtr(ASibling))
}

func (s *TStringGrid) AnchorSame(ASide TAnchorKind, ASibling IControl) {
	StringGrid_AnchorSame(s.instance, ASide, CheckPtr(ASibling))
}

func (s *TStringGrid) AnchorAsAlign(ATheAlign TAlign, ASpace int32) {
	StringGrid_AnchorAsAlign(s.instance, ATheAlign, ASpace)
}

func (s *TStringGrid) AnchorClient(ASpace int32) {
	StringGrid_AnchorClient(s.instance, ASpace)
}

func (s *TStringGrid) ScaleDesignToForm(ASize int32) int32 {
	return StringGrid_ScaleDesignToForm(s.instance, ASize)
}

func (s *TStringGrid) ScaleFormToDesign(ASize int32) int32 {
	return StringGrid_ScaleFormToDesign(s.instance, ASize)
}

func (s *TStringGrid) Scale96ToForm(ASize int32) int32 {
	return StringGrid_Scale96ToForm(s.instance, ASize)
}

func (s *TStringGrid) ScaleFormTo96(ASize int32) int32 {
	return StringGrid_ScaleFormTo96(s.instance, ASize)
}

func (s *TStringGrid) Scale96ToFont(ASize int32) int32 {
	return StringGrid_Scale96ToFont(s.instance, ASize)
}

func (s *TStringGrid) ScaleFontTo96(ASize int32) int32 {
	return StringGrid_ScaleFontTo96(s.instance, ASize)
}

func (s *TStringGrid) ScaleScreenToFont(ASize int32) int32 {
	return StringGrid_ScaleScreenToFont(s.instance, ASize)
}

func (s *TStringGrid) ScaleFontToScreen(ASize int32) int32 {
	return StringGrid_ScaleFontToScreen(s.instance, ASize)
}

func (s *TStringGrid) Scale96ToScreen(ASize int32) int32 {
	return StringGrid_Scale96ToScreen(s.instance, ASize)
}

func (s *TStringGrid) ScaleScreenTo96(ASize int32) int32 {
	return StringGrid_ScaleScreenTo96(s.instance, ASize)
}

func (s *TStringGrid) AutoAdjustLayout(AMode TLayoutAdjustmentPolicy, AFromPPI int32, AToPPI int32, AOldFormWidth int32, ANewFormWidth int32) {
	StringGrid_AutoAdjustLayout(s.instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)
}

func (s *TStringGrid) FixDesignFontsPPI(ADesignTimePPI int32) {
	StringGrid_FixDesignFontsPPI(s.instance, ADesignTimePPI)
}

func (s *TStringGrid) ScaleFontsPPI(AToPPI int32, AProportion float64) {
	StringGrid_ScaleFontsPPI(s.instance, AToPPI, AProportion)
}

func (s *TStringGrid) SelectedColor() TColor {
	return StringGrid_GetSelectedColor(s.instance)
}

func (s *TStringGrid) SetSelectedColor(value TColor) {
	StringGrid_SetSelectedColor(s.instance, value)
}

func (s *TStringGrid) SelectedColumn() *TGridColumn {
	return AsGridColumn(StringGrid_GetSelectedColumn(s.instance))
}

func (s *TStringGrid) StrictSort() bool {
	return StringGrid_GetStrictSort(s.instance)
}

func (s *TStringGrid) SetStrictSort(value bool) {
	StringGrid_SetStrictSort(s.instance, value)
}

func (s *TStringGrid) FixedHotColor() TColor {
	return StringGrid_GetFixedHotColor(s.instance)
}

func (s *TStringGrid) SetFixedHotColor(value TColor) {
	StringGrid_SetFixedHotColor(s.instance, value)
}

func (s *TStringGrid) FastEditing() bool {
	return StringGrid_GetFastEditing(s.instance)
}

func (s *TStringGrid) SetFastEditing(value bool) {
	StringGrid_SetFastEditing(s.instance, value)
}

func (s *TStringGrid) FixedGridLineColor() TColor {
	return StringGrid_GetFixedGridLineColor(s.instance)
}

func (s *TStringGrid) SetFixedGridLineColor(value TColor) {
	StringGrid_SetFixedGridLineColor(s.instance, value)
}

func (s *TStringGrid) FocusColor() TColor {
	return StringGrid_GetFocusColor(s.instance)
}

func (s *TStringGrid) SetFocusColor(value TColor) {
	StringGrid_SetFocusColor(s.instance, value)
}

func (s *TStringGrid) FocusRectVisible() bool {
	return StringGrid_GetFocusRectVisible(s.instance)
}

func (s *TStringGrid) SetFocusRectVisible(value bool) {
	StringGrid_SetFocusRectVisible(s.instance, value)
}

func (s *TStringGrid) GridLineColor() TColor {
	return StringGrid_GetGridLineColor(s.instance)
}

func (s *TStringGrid) SetGridLineColor(value TColor) {
	StringGrid_SetGridLineColor(s.instance, value)
}

func (s *TStringGrid) GridLineStyle() TPenStyle {
	return StringGrid_GetGridLineStyle(s.instance)
}

func (s *TStringGrid) SetGridLineStyle(value TPenStyle) {
	StringGrid_SetGridLineStyle(s.instance, value)
}

func (s *TStringGrid) Editor() *TWinControl {
	return AsWinControl(StringGrid_GetEditor(s.instance))
}

func (s *TStringGrid) SetEditor(value IWinControl) {
	StringGrid_SetEditor(s.instance, CheckPtr(value))
}

func (s *TStringGrid) EditorBorderStyle() TBorderStyle {
	return StringGrid_GetEditorBorderStyle(s.instance)
}

func (s *TStringGrid) SetEditorBorderStyle(value TBorderStyle) {
	StringGrid_SetEditorBorderStyle(s.instance, value)
}

func (s *TStringGrid) EditorMode() bool {
	return StringGrid_GetEditorMode(s.instance)
}

func (s *TStringGrid) SetEditorMode(value bool) {
	StringGrid_SetEditorMode(s.instance, value)
}

func (s *TStringGrid) SortOrder() TSortOrder {
	return StringGrid_GetSortOrder(s.instance)
}

func (s *TStringGrid) SetSortOrder(value TSortOrder) {
	StringGrid_SetSortOrder(s.instance, value)
}

func (s *TStringGrid) SortColumn() int32 {
	return StringGrid_GetSortColumn(s.instance)
}

func (s *TStringGrid) SetOnAfterSelection(fn TOnSelectEvent) {
	StringGrid_SetOnAfterSelection(s.instance, fn)
}

func (s *TStringGrid) SetOnBeforeSelection(fn TOnSelectEvent) {
	StringGrid_SetOnBeforeSelection(s.instance, fn)
}

func (s *TStringGrid) SetOnButtonClick(fn TOnSelectEvent) {
	StringGrid_SetOnButtonClick(s.instance, fn)
}

func (s *TStringGrid) SetOnCheckboxToggled(fn TToggledCheckboxEvent) {
	StringGrid_SetOnCheckboxToggled(s.instance, fn)
}

func (s *TStringGrid) SetOnColRowDeleted(fn TGridOperationEvent) {
	StringGrid_SetOnColRowDeleted(s.instance, fn)
}

func (s *TStringGrid) SetOnColRowExchanged(fn TGridOperationEvent) {
	StringGrid_SetOnColRowExchanged(s.instance, fn)
}

func (s *TStringGrid) SetOnColRowInserted(fn TGridOperationEvent) {
	StringGrid_SetOnColRowInserted(s.instance, fn)
}

func (s *TStringGrid) SetOnColRowMoved(fn TGridOperationEvent) {
	StringGrid_SetOnColRowMoved(s.instance, fn)
}

func (s *TStringGrid) SetOnCompareCells(fn TOnCompareCells) {
	StringGrid_SetOnCompareCells(s.instance, fn)
}

func (s *TStringGrid) SetOnEditingDone(fn TNotifyEvent) {
	StringGrid_SetOnEditingDone(s.instance, fn)
}

func (s *TStringGrid) SetOnGetCellHint(fn TGetCellHintEvent) {
	StringGrid_SetOnGetCellHint(s.instance, fn)
}

func (s *TStringGrid) SetOnGetCheckboxState(fn TGetCheckboxStateEvent) {
	StringGrid_SetOnGetCheckboxState(s.instance, fn)
}

func (s *TStringGrid) SetOnSetCheckboxState(fn TSetCheckboxStateEvent) {
	StringGrid_SetOnSetCheckboxState(s.instance, fn)
}

func (s *TStringGrid) SetOnHeaderClick(fn THdrEvent) {
	StringGrid_SetOnHeaderClick(s.instance, fn)
}

func (s *TStringGrid) SetOnHeaderSized(fn THdrEvent) {
	StringGrid_SetOnHeaderSized(s.instance, fn)
}

func (s *TStringGrid) SetOnHeaderSizing(fn THeaderSizingEvent) {
	StringGrid_SetOnHeaderSizing(s.instance, fn)
}

func (s *TStringGrid) SetOnPickListSelect(fn TNotifyEvent) {
	StringGrid_SetOnPickListSelect(s.instance, fn)
}

func (s *TStringGrid) SetOnSelection(fn TOnSelectEvent) {
	StringGrid_SetOnSelection(s.instance, fn)
}

func (s *TStringGrid) SetOnSelectEditor(fn TSelectEditorEvent) {
	StringGrid_SetOnSelectEditor(s.instance, fn)
}

func (s *TStringGrid) SetOnUserCheckboxBitmap(fn TUserCheckBoxBitmapEvent) {
	StringGrid_SetOnUserCheckboxBitmap(s.instance, fn)
}

func (s *TStringGrid) SetOnValidateEntry(fn TValidateEntryEvent) {
	StringGrid_SetOnValidateEntry(s.instance, fn)
}

func (s *TStringGrid) SetOnPrepareCanvas(fn TOnPrepareCanvasEvent) {
	StringGrid_SetOnPrepareCanvas(s.instance, fn)
}

func (s *TStringGrid) AlternateColor() TColor {
	return StringGrid_GetAlternateColor(s.instance)
}

func (s *TStringGrid) SetAlternateColor(value TColor) {
	StringGrid_SetAlternateColor(s.instance, value)
}

func (s *TStringGrid) AutoAdvance() TAutoAdvance {
	return StringGrid_GetAutoAdvance(s.instance)
}

func (s *TStringGrid) SetAutoAdvance(value TAutoAdvance) {
	StringGrid_SetAutoAdvance(s.instance, value)
}

func (s *TStringGrid) AutoEdit() bool {
	return StringGrid_GetAutoEdit(s.instance)
}

func (s *TStringGrid) SetAutoEdit(value bool) {
	StringGrid_SetAutoEdit(s.instance, value)
}

func (s *TStringGrid) AutoFillColumns() bool {
	return StringGrid_GetAutoFillColumns(s.instance)
}

func (s *TStringGrid) SetAutoFillColumns(value bool) {
	StringGrid_SetAutoFillColumns(s.instance, value)
}

func (s *TStringGrid) CellHintPriority() TCellHintPriority {
	return StringGrid_GetCellHintPriority(s.instance)
}

func (s *TStringGrid) SetCellHintPriority(value TCellHintPriority) {
	StringGrid_SetCellHintPriority(s.instance, value)
}

func (s *TStringGrid) ColumnClickSorts() bool {
	return StringGrid_GetColumnClickSorts(s.instance)
}

func (s *TStringGrid) SetColumnClickSorts(value bool) {
	StringGrid_SetColumnClickSorts(s.instance, value)
}

func (s *TStringGrid) Columns() *TGridColumns {
	return AsGridColumns(StringGrid_GetColumns(s.instance))
}

func (s *TStringGrid) SetColumns(value *TGridColumns) {
	StringGrid_SetColumns(s.instance, CheckPtr(value))
}

func (s *TStringGrid) ExtendedSelect() bool {
	return StringGrid_GetExtendedSelect(s.instance)
}

func (s *TStringGrid) SetExtendedSelect(value bool) {
	StringGrid_SetExtendedSelect(s.instance, value)
}

// 获取平面样式。
func (s *TStringGrid) Flat() bool {
	return StringGrid_GetFlat(s.instance)
}

// 设置平面样式。
func (s *TStringGrid) SetFlat(value bool) {
	StringGrid_SetFlat(s.instance, value)
}

func (s *TStringGrid) HeaderHotZones() TGridZoneSet {
	return StringGrid_GetHeaderHotZones(s.instance)
}

func (s *TStringGrid) SetHeaderHotZones(value TGridZoneSet) {
	StringGrid_SetHeaderHotZones(s.instance, value)
}

func (s *TStringGrid) HeaderPushZones() TGridZoneSet {
	return StringGrid_GetHeaderPushZones(s.instance)
}

func (s *TStringGrid) SetHeaderPushZones(value TGridZoneSet) {
	StringGrid_SetHeaderPushZones(s.instance, value)
}

func (s *TStringGrid) ImageIndexSortAsc() int32 {
	return StringGrid_GetImageIndexSortAsc(s.instance)
}

func (s *TStringGrid) SetImageIndexSortAsc(value int32) {
	StringGrid_SetImageIndexSortAsc(s.instance, value)
}

func (s *TStringGrid) ImageIndexSortDesc() int32 {
	return StringGrid_GetImageIndexSortDesc(s.instance)
}

func (s *TStringGrid) SetImageIndexSortDesc(value int32) {
	StringGrid_SetImageIndexSortDesc(s.instance, value)
}

func (s *TStringGrid) MouseWheelOption() TMouseWheelOption {
	return StringGrid_GetMouseWheelOption(s.instance)
}

func (s *TStringGrid) SetMouseWheelOption(value TMouseWheelOption) {
	StringGrid_SetMouseWheelOption(s.instance, value)
}

func (s *TStringGrid) Options2() TGridOptions2 {
	return StringGrid_GetOptions2(s.instance)
}

func (s *TStringGrid) SetOptions2(value TGridOptions2) {
	StringGrid_SetOptions2(s.instance, value)
}

func (s *TStringGrid) RangeSelectMode() TRangeSelectMode {
	return StringGrid_GetRangeSelectMode(s.instance)
}

func (s *TStringGrid) SetRangeSelectMode(value TRangeSelectMode) {
	StringGrid_SetRangeSelectMode(s.instance, value)
}

func (s *TStringGrid) TabAdvance() TAutoAdvance {
	return StringGrid_GetTabAdvance(s.instance)
}

func (s *TStringGrid) SetTabAdvance(value TAutoAdvance) {
	StringGrid_SetTabAdvance(s.instance, value)
}

func (s *TStringGrid) TitleFont() *TFont {
	return AsFont(StringGrid_GetTitleFont(s.instance))
}

func (s *TStringGrid) SetTitleFont(value *TFont) {
	StringGrid_SetTitleFont(s.instance, CheckPtr(value))
}

func (s *TStringGrid) TitleImageList() *TImageList {
	return AsImageList(StringGrid_GetTitleImageList(s.instance))
}

func (s *TStringGrid) SetTitleImageList(value IComponent) {
	StringGrid_SetTitleImageList(s.instance, CheckPtr(value))
}

func (s *TStringGrid) TitleStyle() TTitleStyle {
	return StringGrid_GetTitleStyle(s.instance)
}

func (s *TStringGrid) SetTitleStyle(value TTitleStyle) {
	StringGrid_SetTitleStyle(s.instance, value)
}

func (s *TStringGrid) UseXORFeatures() bool {
	return StringGrid_GetUseXORFeatures(s.instance)
}

func (s *TStringGrid) SetUseXORFeatures(value bool) {
	StringGrid_SetUseXORFeatures(s.instance, value)
}

// 获取控件自动调整。
//
// Get Control automatically adjusts.
func (s *TStringGrid) Align() TAlign {
	return StringGrid_GetAlign(s.instance)
}

// 设置控件自动调整。
//
// Set Control automatically adjusts.
func (s *TStringGrid) SetAlign(value TAlign) {
	StringGrid_SetAlign(s.instance, value)
}

// 获取四个角位置的锚点。
func (s *TStringGrid) Anchors() TAnchors {
	return StringGrid_GetAnchors(s.instance)
}

// 设置四个角位置的锚点。
func (s *TStringGrid) SetAnchors(value TAnchors) {
	StringGrid_SetAnchors(s.instance, value)
}

func (s *TStringGrid) BiDiMode() TBiDiMode {
	return StringGrid_GetBiDiMode(s.instance)
}

func (s *TStringGrid) SetBiDiMode(value TBiDiMode) {
	StringGrid_SetBiDiMode(s.instance, value)
}

// 获取窗口边框样式。比如：无边框，单一边框等。
func (s *TStringGrid) BorderStyle() TBorderStyle {
	return StringGrid_GetBorderStyle(s.instance)
}

// 设置窗口边框样式。比如：无边框，单一边框等。
func (s *TStringGrid) SetBorderStyle(value TBorderStyle) {
	StringGrid_SetBorderStyle(s.instance, value)
}

// 获取颜色。
//
// Get color.
func (s *TStringGrid) Color() TColor {
	return StringGrid_GetColor(s.instance)
}

// 设置颜色。
//
// Set color.
func (s *TStringGrid) SetColor(value TColor) {
	StringGrid_SetColor(s.instance, value)
}

func (s *TStringGrid) ColCount() int32 {
	return StringGrid_GetColCount(s.instance)
}

func (s *TStringGrid) SetColCount(value int32) {
	StringGrid_SetColCount(s.instance, value)
}

// 获取约束控件大小。
func (s *TStringGrid) Constraints() *TSizeConstraints {
	return AsSizeConstraints(StringGrid_GetConstraints(s.instance))
}

// 设置约束控件大小。
func (s *TStringGrid) SetConstraints(value *TSizeConstraints) {
	StringGrid_SetConstraints(s.instance, CheckPtr(value))
}

func (s *TStringGrid) DefaultColWidth() int32 {
	return StringGrid_GetDefaultColWidth(s.instance)
}

func (s *TStringGrid) SetDefaultColWidth(value int32) {
	StringGrid_SetDefaultColWidth(s.instance, value)
}

func (s *TStringGrid) DefaultRowHeight() int32 {
	return StringGrid_GetDefaultRowHeight(s.instance)
}

func (s *TStringGrid) SetDefaultRowHeight(value int32) {
	StringGrid_SetDefaultRowHeight(s.instance, value)
}

func (s *TStringGrid) DefaultDrawing() bool {
	return StringGrid_GetDefaultDrawing(s.instance)
}

func (s *TStringGrid) SetDefaultDrawing(value bool) {
	StringGrid_SetDefaultDrawing(s.instance, value)
}

// 获取设置控件双缓冲。
//
// Get Set control double buffering.
func (s *TStringGrid) DoubleBuffered() bool {
	return StringGrid_GetDoubleBuffered(s.instance)
}

// 设置设置控件双缓冲。
//
// Set Set control double buffering.
func (s *TStringGrid) SetDoubleBuffered(value bool) {
	StringGrid_SetDoubleBuffered(s.instance, value)
}

// 获取设置控件拖拽时的光标。
//
// Get Set the cursor when the control is dragged.
func (s *TStringGrid) DragCursor() TCursor {
	return StringGrid_GetDragCursor(s.instance)
}

// 设置设置控件拖拽时的光标。
//
// Set Set the cursor when the control is dragged.
func (s *TStringGrid) SetDragCursor(value TCursor) {
	StringGrid_SetDragCursor(s.instance, value)
}

// 获取拖拽方式。
//
// Get Drag and drop.
func (s *TStringGrid) DragKind() TDragKind {
	return StringGrid_GetDragKind(s.instance)
}

// 设置拖拽方式。
//
// Set Drag and drop.
func (s *TStringGrid) SetDragKind(value TDragKind) {
	StringGrid_SetDragKind(s.instance, value)
}

// 获取拖拽模式。
//
// Get Drag mode.
func (s *TStringGrid) DragMode() TDragMode {
	return StringGrid_GetDragMode(s.instance)
}

// 设置拖拽模式。
//
// Set Drag mode.
func (s *TStringGrid) SetDragMode(value TDragMode) {
	StringGrid_SetDragMode(s.instance, value)
}

// 获取控件启用。
//
// Get the control enabled.
func (s *TStringGrid) Enabled() bool {
	return StringGrid_GetEnabled(s.instance)
}

// 设置控件启用。
//
// Set the control enabled.
func (s *TStringGrid) SetEnabled(value bool) {
	StringGrid_SetEnabled(s.instance, value)
}

func (s *TStringGrid) FixedColor() TColor {
	return StringGrid_GetFixedColor(s.instance)
}

func (s *TStringGrid) SetFixedColor(value TColor) {
	StringGrid_SetFixedColor(s.instance, value)
}

func (s *TStringGrid) FixedCols() int32 {
	return StringGrid_GetFixedCols(s.instance)
}

func (s *TStringGrid) SetFixedCols(value int32) {
	StringGrid_SetFixedCols(s.instance, value)
}

func (s *TStringGrid) RowCount() int32 {
	return StringGrid_GetRowCount(s.instance)
}

func (s *TStringGrid) SetRowCount(value int32) {
	StringGrid_SetRowCount(s.instance, value)
}

func (s *TStringGrid) FixedRows() int32 {
	return StringGrid_GetFixedRows(s.instance)
}

func (s *TStringGrid) SetFixedRows(value int32) {
	StringGrid_SetFixedRows(s.instance, value)
}

// 获取字体。
//
// Get Font.
func (s *TStringGrid) Font() *TFont {
	return AsFont(StringGrid_GetFont(s.instance))
}

// 设置字体。
//
// Set Font.
func (s *TStringGrid) SetFont(value *TFont) {
	StringGrid_SetFont(s.instance, CheckPtr(value))
}

func (s *TStringGrid) GridLineWidth() int32 {
	return StringGrid_GetGridLineWidth(s.instance)
}

func (s *TStringGrid) SetGridLineWidth(value int32) {
	StringGrid_SetGridLineWidth(s.instance, value)
}

func (s *TStringGrid) Options() TGridOptions {
	return StringGrid_GetOptions(s.instance)
}

func (s *TStringGrid) SetOptions(value TGridOptions) {
	StringGrid_SetOptions(s.instance, value)
}

// 获取使用父容器颜色。
//
// Get parent color.
func (s *TStringGrid) ParentColor() bool {
	return StringGrid_GetParentColor(s.instance)
}

// 设置使用父容器颜色。
//
// Set parent color.
func (s *TStringGrid) SetParentColor(value bool) {
	StringGrid_SetParentColor(s.instance, value)
}

// 获取使用父容器双缓冲。
//
// Get Parent container double buffering.
func (s *TStringGrid) ParentDoubleBuffered() bool {
	return StringGrid_GetParentDoubleBuffered(s.instance)
}

// 设置使用父容器双缓冲。
//
// Set Parent container double buffering.
func (s *TStringGrid) SetParentDoubleBuffered(value bool) {
	StringGrid_SetParentDoubleBuffered(s.instance, value)
}

// 获取使用父容器字体。
//
// Get Parent container font.
func (s *TStringGrid) ParentFont() bool {
	return StringGrid_GetParentFont(s.instance)
}

// 设置使用父容器字体。
//
// Set Parent container font.
func (s *TStringGrid) SetParentFont(value bool) {
	StringGrid_SetParentFont(s.instance, value)
}

// 获取以父容器的ShowHint属性为准。
func (s *TStringGrid) ParentShowHint() bool {
	return StringGrid_GetParentShowHint(s.instance)
}

// 设置以父容器的ShowHint属性为准。
func (s *TStringGrid) SetParentShowHint(value bool) {
	StringGrid_SetParentShowHint(s.instance, value)
}

// 获取右键菜单。
//
// Get Right click menu.
func (s *TStringGrid) PopupMenu() *TPopupMenu {
	return AsPopupMenu(StringGrid_GetPopupMenu(s.instance))
}

// 设置右键菜单。
//
// Set Right click menu.
func (s *TStringGrid) SetPopupMenu(value IComponent) {
	StringGrid_SetPopupMenu(s.instance, CheckPtr(value))
}

func (s *TStringGrid) ScrollBars() TScrollStyle {
	return StringGrid_GetScrollBars(s.instance)
}

func (s *TStringGrid) SetScrollBars(value TScrollStyle) {
	StringGrid_SetScrollBars(s.instance, value)
}

// 获取显示鼠标悬停提示。
//
// Get Show mouseover tips.
func (s *TStringGrid) ShowHint() bool {
	return StringGrid_GetShowHint(s.instance)
}

// 设置显示鼠标悬停提示。
//
// Set Show mouseover tips.
func (s *TStringGrid) SetShowHint(value bool) {
	StringGrid_SetShowHint(s.instance, value)
}

// 获取Tab切换顺序序号。
//
// Get Tab switching sequence number.
func (s *TStringGrid) TabOrder() TTabOrder {
	return StringGrid_GetTabOrder(s.instance)
}

// 设置Tab切换顺序序号。
//
// Set Tab switching sequence number.
func (s *TStringGrid) SetTabOrder(value TTabOrder) {
	StringGrid_SetTabOrder(s.instance, value)
}

// 获取控件可视。
//
// Get the control visible.
func (s *TStringGrid) Visible() bool {
	return StringGrid_GetVisible(s.instance)
}

// 设置控件可视。
//
// Set the control visible.
func (s *TStringGrid) SetVisible(value bool) {
	StringGrid_SetVisible(s.instance, value)
}

func (s *TStringGrid) VisibleColCount() int32 {
	return StringGrid_GetVisibleColCount(s.instance)
}

func (s *TStringGrid) VisibleRowCount() int32 {
	return StringGrid_GetVisibleRowCount(s.instance)
}

// 设置控件单击事件。
//
// Set control click event.
func (s *TStringGrid) SetOnClick(fn TNotifyEvent) {
	StringGrid_SetOnClick(s.instance, fn)
}

// 设置上下文弹出事件，一般是右键时弹出。
//
// Set Context popup event, usually pop up when right click.
func (s *TStringGrid) SetOnContextPopup(fn TContextPopupEvent) {
	StringGrid_SetOnContextPopup(s.instance, fn)
}

// 设置双击事件。
func (s *TStringGrid) SetOnDblClick(fn TNotifyEvent) {
	StringGrid_SetOnDblClick(s.instance, fn)
}

// 设置拖拽下落事件。
//
// Set Drag and drop event.
func (s *TStringGrid) SetOnDragDrop(fn TDragDropEvent) {
	StringGrid_SetOnDragDrop(s.instance, fn)
}

// 设置拖拽完成事件。
//
// Set Drag and drop completion event.
func (s *TStringGrid) SetOnDragOver(fn TDragOverEvent) {
	StringGrid_SetOnDragOver(s.instance, fn)
}

func (s *TStringGrid) SetOnDrawCell(fn TDrawCellEvent) {
	StringGrid_SetOnDrawCell(s.instance, fn)
}

// 设置停靠结束事件。
//
// Set Dock end event.
func (s *TStringGrid) SetOnEndDock(fn TEndDragEvent) {
	StringGrid_SetOnEndDock(s.instance, fn)
}

// 设置拖拽结束。
//
// Set End of drag.
func (s *TStringGrid) SetOnEndDrag(fn TEndDragEvent) {
	StringGrid_SetOnEndDrag(s.instance, fn)
}

// 设置焦点进入。
//
// Set Focus entry.
func (s *TStringGrid) SetOnEnter(fn TNotifyEvent) {
	StringGrid_SetOnEnter(s.instance, fn)
}

// 设置焦点退出。
//
// Set Focus exit.
func (s *TStringGrid) SetOnExit(fn TNotifyEvent) {
	StringGrid_SetOnExit(s.instance, fn)
}

func (s *TStringGrid) SetOnGetEditMask(fn TGetEditEvent) {
	StringGrid_SetOnGetEditMask(s.instance, fn)
}

func (s *TStringGrid) SetOnGetEditText(fn TGetEditEvent) {
	StringGrid_SetOnGetEditText(s.instance, fn)
}

// 设置键盘按键按下事件。
//
// Set Keyboard button press event.
func (s *TStringGrid) SetOnKeyDown(fn TKeyEvent) {
	StringGrid_SetOnKeyDown(s.instance, fn)
}

// 设置键键下事件。
func (s *TStringGrid) SetOnKeyPress(fn TKeyPressEvent) {
	StringGrid_SetOnKeyPress(s.instance, fn)
}

// 设置键盘按键抬起事件。
//
// Set Keyboard button lift event.
func (s *TStringGrid) SetOnKeyUp(fn TKeyEvent) {
	StringGrid_SetOnKeyUp(s.instance, fn)
}

// 设置鼠标按下事件。
//
// Set Mouse down event.
func (s *TStringGrid) SetOnMouseDown(fn TMouseEvent) {
	StringGrid_SetOnMouseDown(s.instance, fn)
}

// 设置鼠标进入事件。
//
// Set Mouse entry event.
func (s *TStringGrid) SetOnMouseEnter(fn TNotifyEvent) {
	StringGrid_SetOnMouseEnter(s.instance, fn)
}

// 设置鼠标离开事件。
//
// Set Mouse leave event.
func (s *TStringGrid) SetOnMouseLeave(fn TNotifyEvent) {
	StringGrid_SetOnMouseLeave(s.instance, fn)
}

// 设置鼠标移动事件。
func (s *TStringGrid) SetOnMouseMove(fn TMouseMoveEvent) {
	StringGrid_SetOnMouseMove(s.instance, fn)
}

// 设置鼠标抬起事件。
//
// Set Mouse lift event.
func (s *TStringGrid) SetOnMouseUp(fn TMouseEvent) {
	StringGrid_SetOnMouseUp(s.instance, fn)
}

// 设置鼠标滚轮按下事件。
func (s *TStringGrid) SetOnMouseWheelDown(fn TMouseWheelUpDownEvent) {
	StringGrid_SetOnMouseWheelDown(s.instance, fn)
}

// 设置鼠标滚轮抬起事件。
func (s *TStringGrid) SetOnMouseWheelUp(fn TMouseWheelUpDownEvent) {
	StringGrid_SetOnMouseWheelUp(s.instance, fn)
}

func (s *TStringGrid) SetOnSelectCell(fn TSelectCellEvent) {
	StringGrid_SetOnSelectCell(s.instance, fn)
}

func (s *TStringGrid) SetOnSetEditText(fn TSetEditEvent) {
	StringGrid_SetOnSetEditText(s.instance, fn)
}

// 设置启动停靠。
func (s *TStringGrid) SetOnStartDock(fn TStartDockEvent) {
	StringGrid_SetOnStartDock(s.instance, fn)
}

func (s *TStringGrid) SetOnTopLeftChanged(fn TNotifyEvent) {
	StringGrid_SetOnTopLeftChanged(s.instance, fn)
}

// 获取画布。
func (s *TStringGrid) Canvas() *TCanvas {
	return AsCanvas(StringGrid_GetCanvas(s.instance))
}

func (s *TStringGrid) Col() int32 {
	return StringGrid_GetCol(s.instance)
}

func (s *TStringGrid) SetCol(value int32) {
	StringGrid_SetCol(s.instance, value)
}

func (s *TStringGrid) GridHeight() int32 {
	return StringGrid_GetGridHeight(s.instance)
}

func (s *TStringGrid) GridWidth() int32 {
	return StringGrid_GetGridWidth(s.instance)
}

func (s *TStringGrid) LeftCol() int32 {
	return StringGrid_GetLeftCol(s.instance)
}

func (s *TStringGrid) SetLeftCol(value int32) {
	StringGrid_SetLeftCol(s.instance, value)
}

func (s *TStringGrid) Selection() TGridRect {
	return StringGrid_GetSelection(s.instance)
}

func (s *TStringGrid) SetSelection(value TGridRect) {
	StringGrid_SetSelection(s.instance, value)
}

func (s *TStringGrid) Row() int32 {
	return StringGrid_GetRow(s.instance)
}

func (s *TStringGrid) SetRow(value int32) {
	StringGrid_SetRow(s.instance, value)
}

func (s *TStringGrid) TopRow() int32 {
	return StringGrid_GetTopRow(s.instance)
}

func (s *TStringGrid) SetTopRow(value int32) {
	StringGrid_SetTopRow(s.instance, value)
}

// 获取Tab可停留。
//
// Get Tab can stay.
func (s *TStringGrid) TabStop() bool {
	return StringGrid_GetTabStop(s.instance)
}

// 设置Tab可停留。
//
// Set Tab can stay.
func (s *TStringGrid) SetTabStop(value bool) {
	StringGrid_SetTabStop(s.instance, value)
}

// 获取依靠客户端总数。
func (s *TStringGrid) DockClientCount() int32 {
	return StringGrid_GetDockClientCount(s.instance)
}

// 获取停靠站点。
//
// Get Docking site.
func (s *TStringGrid) DockSite() bool {
	return StringGrid_GetDockSite(s.instance)
}

// 设置停靠站点。
//
// Set Docking site.
func (s *TStringGrid) SetDockSite(value bool) {
	StringGrid_SetDockSite(s.instance, value)
}

// 获取鼠标是否在客户端，仅VCL有效。
//
// Get Whether the mouse is on the client, only VCL is valid.
func (s *TStringGrid) MouseInClient() bool {
	return StringGrid_GetMouseInClient(s.instance)
}

// 获取当前停靠的可视总数。
//
// Get The total number of visible calls currently docked.
func (s *TStringGrid) VisibleDockClientCount() int32 {
	return StringGrid_GetVisibleDockClientCount(s.instance)
}

// 获取画刷对象。
//
// Get Brush.
func (s *TStringGrid) Brush() *TBrush {
	return AsBrush(StringGrid_GetBrush(s.instance))
}

// 获取子控件数。
//
// Get Number of child controls.
func (s *TStringGrid) ControlCount() int32 {
	return StringGrid_GetControlCount(s.instance)
}

// 获取控件句柄。
//
// Get Control handle.
func (s *TStringGrid) Handle() HWND {
	return StringGrid_GetHandle(s.instance)
}

// 获取父容器句柄。
//
// Get Parent container handle.
func (s *TStringGrid) ParentWindow() HWND {
	return StringGrid_GetParentWindow(s.instance)
}

// 设置父容器句柄。
//
// Set Parent container handle.
func (s *TStringGrid) SetParentWindow(value HWND) {
	StringGrid_SetParentWindow(s.instance, value)
}

func (s *TStringGrid) Showing() bool {
	return StringGrid_GetShowing(s.instance)
}

// 获取使用停靠管理。
func (s *TStringGrid) UseDockManager() bool {
	return StringGrid_GetUseDockManager(s.instance)
}

// 设置使用停靠管理。
func (s *TStringGrid) SetUseDockManager(value bool) {
	StringGrid_SetUseDockManager(s.instance, value)
}

func (s *TStringGrid) Action() *TAction {
	return AsAction(StringGrid_GetAction(s.instance))
}

func (s *TStringGrid) SetAction(value IComponent) {
	StringGrid_SetAction(s.instance, CheckPtr(value))
}

func (s *TStringGrid) BoundsRect() TRect {
	return StringGrid_GetBoundsRect(s.instance)
}

func (s *TStringGrid) SetBoundsRect(value TRect) {
	StringGrid_SetBoundsRect(s.instance, value)
}

// 获取客户区高度。
//
// Get client height.
func (s *TStringGrid) ClientHeight() int32 {
	return StringGrid_GetClientHeight(s.instance)
}

// 设置客户区高度。
//
// Set client height.
func (s *TStringGrid) SetClientHeight(value int32) {
	StringGrid_SetClientHeight(s.instance, value)
}

func (s *TStringGrid) ClientOrigin() TPoint {
	return StringGrid_GetClientOrigin(s.instance)
}

// 获取客户区矩形。
//
// Get client rectangle.
func (s *TStringGrid) ClientRect() TRect {
	return StringGrid_GetClientRect(s.instance)
}

// 获取客户区宽度。
//
// Get client width.
func (s *TStringGrid) ClientWidth() int32 {
	return StringGrid_GetClientWidth(s.instance)
}

// 设置客户区宽度。
//
// Set client width.
func (s *TStringGrid) SetClientWidth(value int32) {
	StringGrid_SetClientWidth(s.instance, value)
}

// 获取控件状态。
//
// Get control state.
func (s *TStringGrid) ControlState() TControlState {
	return StringGrid_GetControlState(s.instance)
}

// 设置控件状态。
//
// Set control state.
func (s *TStringGrid) SetControlState(value TControlState) {
	StringGrid_SetControlState(s.instance, value)
}

// 获取控件样式。
//
// Get control style.
func (s *TStringGrid) ControlStyle() TControlStyle {
	return StringGrid_GetControlStyle(s.instance)
}

// 设置控件样式。
//
// Set control style.
func (s *TStringGrid) SetControlStyle(value TControlStyle) {
	StringGrid_SetControlStyle(s.instance, value)
}

func (s *TStringGrid) Floating() bool {
	return StringGrid_GetFloating(s.instance)
}

// 获取控件父容器。
//
// Get control parent container.
func (s *TStringGrid) Parent() *TWinControl {
	return AsWinControl(StringGrid_GetParent(s.instance))
}

// 设置控件父容器。
//
// Set control parent container.
func (s *TStringGrid) SetParent(value IWinControl) {
	StringGrid_SetParent(s.instance, CheckPtr(value))
}

// 获取左边位置。
//
// Get Left position.
func (s *TStringGrid) Left() int32 {
	return StringGrid_GetLeft(s.instance)
}

// 设置左边位置。
//
// Set Left position.
func (s *TStringGrid) SetLeft(value int32) {
	StringGrid_SetLeft(s.instance, value)
}

// 获取顶边位置。
//
// Get Top position.
func (s *TStringGrid) Top() int32 {
	return StringGrid_GetTop(s.instance)
}

// 设置顶边位置。
//
// Set Top position.
func (s *TStringGrid) SetTop(value int32) {
	StringGrid_SetTop(s.instance, value)
}

// 获取宽度。
//
// Get width.
func (s *TStringGrid) Width() int32 {
	return StringGrid_GetWidth(s.instance)
}

// 设置宽度。
//
// Set width.
func (s *TStringGrid) SetWidth(value int32) {
	StringGrid_SetWidth(s.instance, value)
}

// 获取高度。
//
// Get height.
func (s *TStringGrid) Height() int32 {
	return StringGrid_GetHeight(s.instance)
}

// 设置高度。
//
// Set height.
func (s *TStringGrid) SetHeight(value int32) {
	StringGrid_SetHeight(s.instance, value)
}

// 获取控件光标。
//
// Get control cursor.
func (s *TStringGrid) Cursor() TCursor {
	return StringGrid_GetCursor(s.instance)
}

// 设置控件光标。
//
// Set control cursor.
func (s *TStringGrid) SetCursor(value TCursor) {
	StringGrid_SetCursor(s.instance, value)
}

// 获取组件鼠标悬停提示。
//
// Get component mouse hints.
func (s *TStringGrid) Hint() string {
	return StringGrid_GetHint(s.instance)
}

// 设置组件鼠标悬停提示。
//
// Set component mouse hints.
func (s *TStringGrid) SetHint(value string) {
	StringGrid_SetHint(s.instance, value)
}

// 获取组件总数。
//
// Get the total number of components.
func (s *TStringGrid) ComponentCount() int32 {
	return StringGrid_GetComponentCount(s.instance)
}

// 获取组件索引。
//
// Get component index.
func (s *TStringGrid) ComponentIndex() int32 {
	return StringGrid_GetComponentIndex(s.instance)
}

// 设置组件索引。
//
// Set component index.
func (s *TStringGrid) SetComponentIndex(value int32) {
	StringGrid_SetComponentIndex(s.instance, value)
}

// 获取组件所有者。
//
// Get component owner.
func (s *TStringGrid) Owner() *TComponent {
	return AsComponent(StringGrid_GetOwner(s.instance))
}

// 获取组件名称。
//
// Get the component name.
func (s *TStringGrid) Name() string {
	return StringGrid_GetName(s.instance)
}

// 设置组件名称。
//
// Set the component name.
func (s *TStringGrid) SetName(value string) {
	StringGrid_SetName(s.instance, value)
}

// 获取对象标记。
//
// Get the control tag.
func (s *TStringGrid) Tag() int {
	return StringGrid_GetTag(s.instance)
}

// 设置对象标记。
//
// Set the control tag.
func (s *TStringGrid) SetTag(value int) {
	StringGrid_SetTag(s.instance, value)
}

// 获取左边锚点。
func (s *TStringGrid) AnchorSideLeft() *TAnchorSide {
	return AsAnchorSide(StringGrid_GetAnchorSideLeft(s.instance))
}

// 设置左边锚点。
func (s *TStringGrid) SetAnchorSideLeft(value *TAnchorSide) {
	StringGrid_SetAnchorSideLeft(s.instance, CheckPtr(value))
}

// 获取顶边锚点。
func (s *TStringGrid) AnchorSideTop() *TAnchorSide {
	return AsAnchorSide(StringGrid_GetAnchorSideTop(s.instance))
}

// 设置顶边锚点。
func (s *TStringGrid) SetAnchorSideTop(value *TAnchorSide) {
	StringGrid_SetAnchorSideTop(s.instance, CheckPtr(value))
}

// 获取右边锚点。
func (s *TStringGrid) AnchorSideRight() *TAnchorSide {
	return AsAnchorSide(StringGrid_GetAnchorSideRight(s.instance))
}

// 设置右边锚点。
func (s *TStringGrid) SetAnchorSideRight(value *TAnchorSide) {
	StringGrid_SetAnchorSideRight(s.instance, CheckPtr(value))
}

// 获取底边锚点。
func (s *TStringGrid) AnchorSideBottom() *TAnchorSide {
	return AsAnchorSide(StringGrid_GetAnchorSideBottom(s.instance))
}

// 设置底边锚点。
func (s *TStringGrid) SetAnchorSideBottom(value *TAnchorSide) {
	StringGrid_SetAnchorSideBottom(s.instance, CheckPtr(value))
}

func (s *TStringGrid) ChildSizing() *TControlChildSizing {
	return AsControlChildSizing(StringGrid_GetChildSizing(s.instance))
}

func (s *TStringGrid) SetChildSizing(value *TControlChildSizing) {
	StringGrid_SetChildSizing(s.instance, CheckPtr(value))
}

// 获取边框间距。
func (s *TStringGrid) BorderSpacing() *TControlBorderSpacing {
	return AsControlBorderSpacing(StringGrid_GetBorderSpacing(s.instance))
}

// 设置边框间距。
func (s *TStringGrid) SetBorderSpacing(value *TControlBorderSpacing) {
	StringGrid_SetBorderSpacing(s.instance, CheckPtr(value))
}

func (s *TStringGrid) IsCellSelected(aCol int32, aRow int32) bool {
	return StringGrid_GetIsCellSelected(s.instance, aCol, aRow)
}

func (s *TStringGrid) Cells(ACol int32, ARow int32) string {
	return StringGrid_GetCells(s.instance, ACol, ARow)
}

func (s *TStringGrid) SetCells(ACol int32, ARow int32, value string) {
	StringGrid_SetCells(s.instance, ACol, ARow, value)
}

func (s *TStringGrid) Cols(Index int32) *TStrings {
	return AsStrings(StringGrid_GetCols(s.instance, Index))
}

func (s *TStringGrid) SetCols(Index int32, value IStrings) {
	StringGrid_SetCols(s.instance, Index, CheckPtr(value))
}

func (s *TStringGrid) Objects(ACol int32, ARow int32) *TObject {
	return AsObject(StringGrid_GetObjects(s.instance, ACol, ARow))
}

func (s *TStringGrid) SetObjects(ACol int32, ARow int32, value IObject) {
	StringGrid_SetObjects(s.instance, ACol, ARow, CheckPtr(value))
}

func (s *TStringGrid) Rows(Index int32) *TStrings {
	return AsStrings(StringGrid_GetRows(s.instance, Index))
}

func (s *TStringGrid) SetRows(Index int32, value IStrings) {
	StringGrid_SetRows(s.instance, Index, CheckPtr(value))
}

func (s *TStringGrid) ColWidths(Index int32) int32 {
	return StringGrid_GetColWidths(s.instance, Index)
}

func (s *TStringGrid) SetColWidths(Index int32, value int32) {
	StringGrid_SetColWidths(s.instance, Index, value)
}

func (s *TStringGrid) RowHeights(Index int32) int32 {
	return StringGrid_GetRowHeights(s.instance, Index)
}

func (s *TStringGrid) SetRowHeights(Index int32, value int32) {
	StringGrid_SetRowHeights(s.instance, Index, value)
}

// 获取指定索引停靠客户端。
func (s *TStringGrid) DockClients(Index int32) *TControl {
	return AsControl(StringGrid_GetDockClients(s.instance, Index))
}

// 获取指定索引子控件。
func (s *TStringGrid) Controls(Index int32) *TControl {
	return AsControl(StringGrid_GetControls(s.instance, Index))
}

// 获取指定索引组件。
//
// Get the specified index component.
func (s *TStringGrid) Components(AIndex int32) *TComponent {
	return AsComponent(StringGrid_GetComponents(s.instance, AIndex))
}

// 获取锚侧面。
func (s *TStringGrid) AnchorSide(AKind TAnchorKind) *TAnchorSide {
	return AsAnchorSide(StringGrid_GetAnchorSide(s.instance, AKind))
}
