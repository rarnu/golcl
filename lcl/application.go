//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	. "github.com/rarnu/golcl/lcl/api"
	. "github.com/rarnu/golcl/lcl/types"
	"unsafe"
)

type TApplication struct {
	IComponent
	instance uintptr
	// 特殊情况下使用，主要应对Go的GC问题，与LCL没有太多关系。
	ptr unsafe.Pointer
}

// NewApplication 创建一个新的对象。
func NewApplication(owner IComponent) *TApplication {
	a := new(TApplication)
	a.instance = Application_Create(CheckPtr(owner))
	a.ptr = unsafe.Pointer(a.instance)
	return a
}

// AsApplication 动态转换一个已存在的对象实例。
func AsApplication(obj interface{}) *TApplication {
	instance, ptr := getInstance(obj)
	if instance == 0 {
		return nil
	}
	return &TApplication{instance: instance, ptr: ptr}
}

// ApplicationFromInst 新建一个对象来自已经存在的对象实例指针。
func ApplicationFromInst(inst uintptr) *TApplication {
	return AsApplication(inst)
}

// ApplicationFromObj 新建一个对象来自已经存在的对象实例。
func ApplicationFromObj(obj IObject) *TApplication {
	return AsApplication(obj)
}

// ApplicationFromUnsafePointer 新建一个对象来自不安全的地址。注意：使用此函数可能造成一些不明情况，慎用。
// Deprecated: use AsApplication.
func ApplicationFromUnsafePointer(ptr unsafe.Pointer) *TApplication {
	return AsApplication(ptr)
}

// Free 释放对象。
func (a *TApplication) Free() {
	if a.instance != 0 {
		Application_Free(a.instance)
		a.instance, a.ptr = 0, nullptr
	}
}

// Instance 返回对象实例指针。
func (a *TApplication) Instance() uintptr {
	return a.instance
}

// UnsafeAddr 获取一个不安全的地址。
func (a *TApplication) UnsafeAddr() unsafe.Pointer {
	return a.ptr
}

// IsValid 检测地址是否为空。
func (a *TApplication) IsValid() bool {
	return a.instance != 0
}

// Is 检测当前对象是否继承自目标对象。
func (a *TApplication) Is() TIs {
	return TIs(a.instance)
}

// 动态转换当前对象为目标对象。
//
// Dynamically convert the current object to the target object.
//func (a *TApplication) As() TAs {
//    return TAs(a.instance)
//}

// TApplicationClass 获取类信息指针。
func TApplicationClass() TClass {
	return Application_StaticClassType()
}

// ActivateHint 激活鼠标悬停提示。
func (a *TApplication) ActivateHint(CursorPos TPoint) {
	Application_ActivateHint(a.instance, CursorPos)
}

// BringToFront 将控件置于最前。
func (a *TApplication) BringToFront() {
	Application_BringToFront(a.instance)
}

// CancelHint 取消鼠标悬停提示。
func (a *TApplication) CancelHint() {
	Application_CancelHint(a.instance)
}

// HandleMessage 消息循环，不要使用。
func (a *TApplication) HandleMessage() {
	Application_HandleMessage(a.instance)
}

// HideHint 隐藏鼠标悬停提示。
func (a *TApplication) HideHint() {
	Application_HideHint(a.instance)
}

// Minimize 最小化应用程序。
func (a *TApplication) Minimize() {
	Application_Minimize(a.instance)
}

func (a *TApplication) ModalStarted() {
	Application_ModalStarted(a.instance)
}

func (a *TApplication) ModalFinished() {
	Application_ModalFinished(a.instance)
}

// ProcessMessages 处理消息循环。
func (a *TApplication) ProcessMessages() {
	Application_ProcessMessages(a.instance)
}

// Restore 恢复小最小的应用。
func (a *TApplication) Restore() {
	Application_Restore(a.instance)
}

// RestoreTopMosts 恢复最小化的应用并置顶。
func (a *TApplication) RestoreTopMosts() {
	Application_RestoreTopMosts(a.instance)
}

// Terminate 结束应用程序。
func (a *TApplication) Terminate() {
	Application_Terminate(a.instance)
}

// MessageBox 显示消息框。
func (a *TApplication) MessageBox(Text string, Caption string, Flags int32) int32 {
	return Application_MessageBox(a.instance, Text, Caption, Flags)
}

// FindComponent 查找指定名称的组件。
func (a *TApplication) FindComponent(AName string) *TComponent {
	return AsComponent(Application_FindComponent(a.instance, AName))
}

// GetNamePath 获取类名路径。
func (a *TApplication) GetNamePath() string {
	return Application_GetNamePath(a.instance)
}

// HasParent 是否有父容器。
func (a *TApplication) HasParent() bool {
	return Application_HasParent(a.instance)
}

// Assign 复制一个对象，如果对象实现了此方法的话。
func (a *TApplication) Assign(Source IObject) {
	Application_Assign(a.instance, CheckPtr(Source))
}

// ClassType 获取类的类型信息。
func (a *TApplication) ClassType() TClass {
	return Application_ClassType(a.instance)
}

// ClassName 获取当前对象类名称。
func (a *TApplication) ClassName() string {
	return Application_ClassName(a.instance)
}

// InstanceSize 获取当前对象实例大小。
func (a *TApplication) InstanceSize() int32 {
	return Application_InstanceSize(a.instance)
}

// InheritsFrom 判断当前类是否继承自指定类。
func (a *TApplication) InheritsFrom(AClass TClass) bool {
	return Application_InheritsFrom(a.instance, AClass)
}

// Equals 与一个对象进行比较。
func (a *TApplication) Equals(Obj IObject) bool {
	return Application_Equals(a.instance, CheckPtr(Obj))
}

// GetHashCode 获取类的哈希值。
func (a *TApplication) GetHashCode() int32 {
	return Application_GetHashCode(a.instance)
}

// ToString 文本类信息。
func (a *TApplication) ToString() string {
	return Application_ToString(a.instance)
}

func (a *TApplication) Scaled() bool {
	return Application_GetScaled(a.instance)
}

func (a *TApplication) SetScaled(value bool) {
	Application_SetScaled(a.instance, value)
}

func (a *TApplication) SingleInstanceEnabled() bool {
	return Application_GetSingleInstanceEnabled(a.instance)
}

func (a *TApplication) SetSingleInstanceEnabled(value bool) {
	Application_SetSingleInstanceEnabled(a.instance, value)
}

func (a *TApplication) Location() string {
	return Application_GetLocation(a.instance)
}

func (a *TApplication) StopOnException() bool {
	return Application_GetStopOnException(a.instance)
}

func (a *TApplication) SetStopOnException(value bool) {
	Application_SetStopOnException(a.instance, value)
}

func (a *TApplication) ExceptionExitCode() int32 {
	return Application_GetExceptionExitCode(a.instance)
}

func (a *TApplication) SetExceptionExitCode(value int32) {
	Application_SetExceptionExitCode(a.instance, value)
}

// ExeName 获取当前exe文件名，包含全路径。
func (a *TApplication) ExeName() string {
	return Application_GetExeName(a.instance)
}

// Hint 获取组件鼠标悬停提示。
func (a *TApplication) Hint() string {
	return Application_GetHint(a.instance)
}

// SetHint 设置组件鼠标悬停提示。
func (a *TApplication) SetHint(value string) {
	Application_SetHint(a.instance, value)
}

// HintColor 获取鼠标悬停提示颜色。
func (a *TApplication) HintColor() TColor {
	return Application_GetHintColor(a.instance)
}

// SetHintColor 设置鼠标悬停提示颜色。
func (a *TApplication) SetHintColor(value TColor) {
	Application_SetHintColor(a.instance, value)
}

// HintHidePause 获取鼠标悬停提示暂停时间，ms。
func (a *TApplication) HintHidePause() int32 {
	return Application_GetHintHidePause(a.instance)
}

// SetHintHidePause 设置鼠标悬停提示暂停时间，ms。
func (a *TApplication) SetHintHidePause(value int32) {
	Application_SetHintHidePause(a.instance, value)
}

// HintPause 获取鼠标悬停暂时时间。
func (a *TApplication) HintPause() int32 {
	return Application_GetHintPause(a.instance)
}

// SetHintPause 设置鼠标悬停暂时时间。
func (a *TApplication) SetHintPause(value int32) {
	Application_SetHintPause(a.instance, value)
}

func (a *TApplication) HintShortCuts() bool {
	return Application_GetHintShortCuts(a.instance)
}

func (a *TApplication) SetHintShortCuts(value bool) {
	Application_SetHintShortCuts(a.instance, value)
}

func (a *TApplication) HintShortPause() int32 {
	return Application_GetHintShortPause(a.instance)
}

func (a *TApplication) SetHintShortPause(value int32) {
	Application_SetHintShortPause(a.instance, value)
}

// Icon 获取图标。
func (a *TApplication) Icon() *TIcon {
	return AsIcon(Application_GetIcon(a.instance))
}

// SetIcon 设置图标。
func (a *TApplication) SetIcon(value *TIcon) {
	Application_SetIcon(a.instance, CheckPtr(value))
}

func (a *TApplication) MainForm() *TForm {
	return AsForm(Application_GetMainForm(a.instance))
}

func (a *TApplication) MainFormHandle() HWND {
	return Application_GetMainFormHandle(a.instance)
}

// MainFormOnTaskBar 获取主窗口显示在任务栏上。
func (a *TApplication) MainFormOnTaskBar() bool {
	return Application_GetMainFormOnTaskBar(a.instance)
}

// SetMainFormOnTaskBar 设置主窗口显示在任务栏上。
func (a *TApplication) SetMainFormOnTaskBar(value bool) {
	Application_SetMainFormOnTaskBar(a.instance, value)
}

func (a *TApplication) BiDiMode() TBiDiMode {
	return Application_GetBiDiMode(a.instance)
}

func (a *TApplication) SetBiDiMode(value TBiDiMode) {
	Application_SetBiDiMode(a.instance, value)
}

// ShowHint 获取显示鼠标悬停提示。
func (a *TApplication) ShowHint() bool {
	return Application_GetShowHint(a.instance)
}

// SetShowHint 设置显示鼠标悬停提示。
func (a *TApplication) SetShowHint(value bool) {
	Application_SetShowHint(a.instance, value)
}

// ShowMainForm 获取初始显示主窗口。
func (a *TApplication) ShowMainForm() bool {
	return Application_GetShowMainForm(a.instance)
}

// SetShowMainForm 设置初始显示主窗口。
func (a *TApplication) SetShowMainForm(value bool) {
	Application_SetShowMainForm(a.instance, value)
}

func (a *TApplication) Title() string {
	return Application_GetTitle(a.instance)
}

func (a *TApplication) SetTitle(value string) {
	Application_SetTitle(a.instance, value)
}

func (a *TApplication) SetOnActivate(fn TNotifyEvent) {
	Application_SetOnActivate(a.instance, fn)
}

func (a *TApplication) SetOnDeactivate(fn TNotifyEvent) {
	Application_SetOnDeactivate(a.instance, fn)
}

// SetOnException 设置应用程序异常事件。
func (a *TApplication) SetOnException(fn TExceptionEvent) {
	Application_SetOnException(a.instance, fn)
}

func (a *TApplication) SetOnHelp(fn THelpEvent) {
	Application_SetOnHelp(a.instance, fn)
}

// SetOnHint 设置鼠标悬停提示事件。
func (a *TApplication) SetOnHint(fn TNotifyEvent) {
	Application_SetOnHint(a.instance, fn)
}

// SetOnMinimize 设置App或者窗口最小化事件。
func (a *TApplication) SetOnMinimize(fn TNotifyEvent) {
	Application_SetOnMinimize(a.instance, fn)
}

// SetOnRestore 设置App或者窗口恢复事件。
func (a *TApplication) SetOnRestore(fn TNotifyEvent) {
	Application_SetOnRestore(a.instance, fn)
}

func (a *TApplication) SetOnShortCut(fn TShortCutEvent) {
	Application_SetOnShortCut(a.instance, fn)
}

// Handle 获取控件句柄。
func (a *TApplication) Handle() HWND {
	return Application_GetHandle(a.instance)
}

// SetHandle 设置控件句柄。
func (a *TApplication) SetHandle(value HWND) {
	Application_SetHandle(a.instance, value)
}

// ComponentCount 获取组件总数。
func (a *TApplication) ComponentCount() int32 {
	return Application_GetComponentCount(a.instance)
}

// ComponentIndex 获取组件索引。
func (a *TApplication) ComponentIndex() int32 {
	return Application_GetComponentIndex(a.instance)
}

// SetComponentIndex 设置组件索引。
func (a *TApplication) SetComponentIndex(value int32) {
	Application_SetComponentIndex(a.instance, value)
}

// Owner 获取组件所有者。
func (a *TApplication) Owner() *TComponent {
	return AsComponent(Application_GetOwner(a.instance))
}

// Name 获取组件名称。
func (a *TApplication) Name() string {
	return Application_GetName(a.instance)
}

// SetName 设置组件名称。
func (a *TApplication) SetName(value string) {
	Application_SetName(a.instance, value)
}

// Tag 获取对象标记。
func (a *TApplication) Tag() int {
	return Application_GetTag(a.instance)
}

// SetTag 设置对象标记。
func (a *TApplication) SetTag(value int) {
	Application_SetTag(a.instance, value)
}

// Components 获取指定索引组件。
func (a *TApplication) Components(AIndex int32) *TComponent {
	return AsComponent(Application_GetComponents(a.instance, AIndex))
}
