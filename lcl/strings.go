//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	. "github.com/rarnu/golcl/lcl/api"
	. "github.com/rarnu/golcl/lcl/types"
	"unsafe"
)

type TStrings struct {
	IStrings
	instance uintptr
	// 特殊情况下使用，主要应对Go的GC问题，与LCL没有太多关系。
	ptr unsafe.Pointer
}

// 创建一个新的对象。
//
// Create a new object.
func NewStrings() *TStrings {
	s := new(TStrings)
	s.instance = Strings_Create()
	s.ptr = unsafe.Pointer(s.instance)
	setFinalizer(s, (*TStrings).Free)
	return s
}

// 动态转换一个已存在的对象实例。
//
// Dynamically convert an existing object instance.
func AsStrings(obj any) *TStrings {
	instance, ptr := getInstance(obj)
	if instance == 0 {
		return nil
	}
	return &TStrings{instance: instance, ptr: ptr}
}

// -------------------------- Deprecated begin --------------------------
// 新建一个对象来自已经存在的对象实例指针。
//
// Create a new object from an existing object instance pointer.
// Deprecated: use AsStrings.
func StringsFromInst(inst uintptr) *TStrings {
	return AsStrings(inst)
}

// 新建一个对象来自已经存在的对象实例。
//
// Create a new object from an existing object instance.
// Deprecated: use AsStrings.
func StringsFromObj(obj IObject) *TStrings {
	return AsStrings(obj)
}

// 新建一个对象来自不安全的地址。注意：使用此函数可能造成一些不明情况，慎用。
//
// Create a new object from an unsecured address. Note: Using this function may cause some unclear situations and be used with caution..
// Deprecated: use AsStrings.
func StringsFromUnsafePointer(ptr unsafe.Pointer) *TStrings {
	return AsStrings(ptr)
}

// -------------------------- Deprecated end --------------------------
// 释放对象。
//
// Free object.
func (s *TStrings) Free() {
	if s.instance != 0 {
		Strings_Free(s.instance)
		s.instance, s.ptr = 0, nullptr
	}
}

// 返回对象实例指针。
//
// Return object instance pointer.
func (s *TStrings) Instance() uintptr {
	return s.instance
}

// 获取一个不安全的地址。
//
// Get an unsafe address.
func (s *TStrings) UnsafeAddr() unsafe.Pointer {
	return s.ptr
}

// 检测地址是否为空。
//
// Check if the address is empty.
func (s *TStrings) IsValid() bool {
	return s.instance != 0
}

// 检测当前对象是否继承自目标对象。
//
// Checks whether the current object is inherited from the target object.
func (s *TStrings) Is() TIs {
	return TIs(s.instance)
}

// 动态转换当前对象为目标对象。
//
// Dynamically convert the current object to the target object.
//func (s *TStrings) As() TAs {
//    return TAs(s.instance)
//}

// 获取类信息指针。
//
// Get class information pointer.
func TStringsClass() TClass {
	return Strings_StaticClassType()
}

// Strings()的别名。
//
// Alias of Strings().
func (s *TStrings) S(Index int32) string {
	return s.Strings(Index)
}

// SetStrings()的别名。
//
// Alias of SetStrings().
func (s *TStrings) SetS(Index int32, value string) {
	s.SetStrings(Index, value)
}

func (s *TStrings) Add(S string) int32 {
	return Strings_Add(s.instance, S)
}

func (s *TStrings) AddObject(S string, AObject IObject) int32 {
	return Strings_AddObject(s.instance, S, CheckPtr(AObject))
}

func (s *TStrings) Append(S string) {
	Strings_Append(s.instance, S)
}

// 复制一个对象，如果对象实现了此方法的话。
//
// Copy an object, if the object implements this method.
func (s *TStrings) Assign(Source IObject) {
	Strings_Assign(s.instance, CheckPtr(Source))
}

func (s *TStrings) BeginUpdate() {
	Strings_BeginUpdate(s.instance)
}

// 清除。
func (s *TStrings) Clear() {
	Strings_Clear(s.instance)
}

func (s *TStrings) Delete(Index int32) {
	Strings_Delete(s.instance, Index)
}

func (s *TStrings) EndUpdate() {
	Strings_EndUpdate(s.instance)
}

// 与一个对象进行比较。
//
// Compare with an object.
func (s *TStrings) Equals(Strings IObject) bool {
	return Strings_Equals(s.instance, CheckPtr(Strings))
}

func (s *TStrings) IndexOf(S string) int32 {
	return Strings_IndexOf(s.instance, S)
}

func (s *TStrings) IndexOfName(Name string) int32 {
	return Strings_IndexOfName(s.instance, Name)
}

func (s *TStrings) IndexOfObject(AObject IObject) int32 {
	return Strings_IndexOfObject(s.instance, CheckPtr(AObject))
}

func (s *TStrings) Insert(Index int32, S string) {
	Strings_Insert(s.instance, Index, S)
}

func (s *TStrings) InsertObject(Index int32, S string, AObject IObject) {
	Strings_InsertObject(s.instance, Index, S, CheckPtr(AObject))
}

// 从文件加载。
func (s *TStrings) LoadFromFile(FileName string) {
	Strings_LoadFromFile(s.instance, FileName)
}

// 文件流加载。
func (s *TStrings) LoadFromStream(Stream IStream) {
	Strings_LoadFromStream(s.instance, CheckPtr(Stream))
}

func (s *TStrings) Move(CurIndex int32, NewIndex int32) {
	Strings_Move(s.instance, CurIndex, NewIndex)
}

// 保存至文件。
func (s *TStrings) SaveToFile(FileName string) {
	Strings_SaveToFile(s.instance, FileName)
}

// 保存至流。
func (s *TStrings) SaveToStream(Stream IStream) {
	Strings_SaveToStream(s.instance, CheckPtr(Stream))
}

// 获取类名路径。
//
// Get the class name path.
func (s *TStrings) GetNamePath() string {
	return Strings_GetNamePath(s.instance)
}

// 获取类的类型信息。
//
// Get class type information.
func (s *TStrings) ClassType() TClass {
	return Strings_ClassType(s.instance)
}

// 获取当前对象类名称。
//
// Get the current object class name.
func (s *TStrings) ClassName() string {
	return Strings_ClassName(s.instance)
}

// 获取当前对象实例大小。
//
// Get the current object instance size.
func (s *TStrings) InstanceSize() int32 {
	return Strings_InstanceSize(s.instance)
}

// 判断当前类是否继承自指定类。
//
// Determine whether the current class inherits from the specified class.
func (s *TStrings) InheritsFrom(AClass TClass) bool {
	return Strings_InheritsFrom(s.instance, AClass)
}

// 获取类的哈希值。
//
// Get the hash value of the class.
func (s *TStrings) GetHashCode() int32 {
	return Strings_GetHashCode(s.instance)
}

// 文本类信息。
//
// Text information.
func (s *TStrings) ToString() string {
	return Strings_ToString(s.instance)
}

func (s *TStrings) Capacity() int32 {
	return Strings_GetCapacity(s.instance)
}

func (s *TStrings) SetCapacity(value int32) {
	Strings_SetCapacity(s.instance, value)
}

func (s *TStrings) CommaText() string {
	return Strings_GetCommaText(s.instance)
}

func (s *TStrings) SetCommaText(value string) {
	Strings_SetCommaText(s.instance, value)
}

func (s *TStrings) Count() int32 {
	return Strings_GetCount(s.instance)
}

func (s *TStrings) Delimiter() uint16 {
	return Strings_GetDelimiter(s.instance)
}

func (s *TStrings) SetDelimiter(value uint16) {
	Strings_SetDelimiter(s.instance, value)
}

func (s *TStrings) NameValueSeparator() uint16 {
	return Strings_GetNameValueSeparator(s.instance)
}

func (s *TStrings) SetNameValueSeparator(value uint16) {
	Strings_SetNameValueSeparator(s.instance, value)
}

// 获取文本。
func (s *TStrings) Text() string {
	return Strings_GetText(s.instance)
}

// 设置文本。
func (s *TStrings) SetText(value string) {
	Strings_SetText(s.instance, value)
}

func (s *TStrings) Objects(Index int32) *TObject {
	return AsObject(Strings_GetObjects(s.instance, Index))
}

func (s *TStrings) SetObjects(Index int32, value IObject) {
	Strings_SetObjects(s.instance, Index, CheckPtr(value))
}

func (s *TStrings) Values(Name string) string {
	return Strings_GetValues(s.instance, Name)
}

func (s *TStrings) SetValues(Name string, value string) {
	Strings_SetValues(s.instance, Name, value)
}

func (s *TStrings) ValueFromIndex(Index int32) string {
	return Strings_GetValueFromIndex(s.instance, Index)
}

func (s *TStrings) SetValueFromIndex(Index int32, value string) {
	Strings_SetValueFromIndex(s.instance, Index, value)
}

func (s *TStrings) Strings(Index int32) string {
	return Strings_GetStrings(s.instance, Index)
}

func (s *TStrings) SetStrings(Index int32, value string) {
	Strings_SetStrings(s.instance, Index, value)
}
