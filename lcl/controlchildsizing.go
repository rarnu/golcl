//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	. "github.com/rarnu/golcl/lcl/api"
	. "github.com/rarnu/golcl/lcl/types"
	"unsafe"
)

type TControlChildSizing struct {
	IObject
	instance uintptr
	// 特殊情况下使用，主要应对Go的GC问题，与LCL没有太多关系。
	ptr unsafe.Pointer
}

// 动态转换一个已存在的对象实例。
//
// Dynamically convert an existing object instance.
func AsControlChildSizing(obj any) *TControlChildSizing {
	instance, ptr := getInstance(obj)
	if instance == 0 {
		return nil
	}
	return &TControlChildSizing{instance: instance, ptr: ptr}
}

// -------------------------- Deprecated begin --------------------------
// 新建一个对象来自已经存在的对象实例指针。
//
// Create a new object from an existing object instance pointer.
// Deprecated: use AsControlChildSizing.
func ControlChildSizingFromInst(inst uintptr) *TControlChildSizing {
	return AsControlChildSizing(inst)
}

// 新建一个对象来自已经存在的对象实例。
//
// Create a new object from an existing object instance.
// Deprecated: use AsControlChildSizing.
func ControlChildSizingFromObj(obj IObject) *TControlChildSizing {
	return AsControlChildSizing(obj)
}

// 新建一个对象来自不安全的地址。注意：使用此函数可能造成一些不明情况，慎用。
//
// Create a new object from an unsecured address. Note: Using this function may cause some unclear situations and be used with caution..
// Deprecated: use AsControlChildSizing.
func ControlChildSizingFromUnsafePointer(ptr unsafe.Pointer) *TControlChildSizing {
	return AsControlChildSizing(ptr)
}

// -------------------------- Deprecated end --------------------------
// 返回对象实例指针。
//
// Return object instance pointer.
func (c *TControlChildSizing) Instance() uintptr {
	return c.instance
}

// 获取一个不安全的地址。
//
// Get an unsafe address.
func (c *TControlChildSizing) UnsafeAddr() unsafe.Pointer {
	return c.ptr
}

// 检测地址是否为空。
//
// Check if the address is empty.
func (c *TControlChildSizing) IsValid() bool {
	return c.instance != 0
}

// 检测当前对象是否继承自目标对象。
//
// Checks whether the current object is inherited from the target object.
func (c *TControlChildSizing) Is() TIs {
	return TIs(c.instance)
}

// 动态转换当前对象为目标对象。
//
// Dynamically convert the current object to the target object.
//func (c *TControlChildSizing) As() TAs {
//    return TAs(c.instance)
//}

// 获取类信息指针。
//
// Get class information pointer.
func TControlChildSizingClass() TClass {
	return ControlChildSizing_StaticClassType()
}

// 复制一个对象，如果对象实现了此方法的话。
//
// Copy an object, if the object implements this method.
func (c *TControlChildSizing) Assign(Source IObject) {
	ControlChildSizing_Assign(c.instance, CheckPtr(Source))
}

// 获取类名路径。
//
// Get the class name path.
func (c *TControlChildSizing) GetNamePath() string {
	return ControlChildSizing_GetNamePath(c.instance)
}

// 获取类的类型信息。
//
// Get class type information.
func (c *TControlChildSizing) ClassType() TClass {
	return ControlChildSizing_ClassType(c.instance)
}

// 获取当前对象类名称。
//
// Get the current object class name.
func (c *TControlChildSizing) ClassName() string {
	return ControlChildSizing_ClassName(c.instance)
}

// 获取当前对象实例大小。
//
// Get the current object instance size.
func (c *TControlChildSizing) InstanceSize() int32 {
	return ControlChildSizing_InstanceSize(c.instance)
}

// 判断当前类是否继承自指定类。
//
// Determine whether the current class inherits from the specified class.
func (c *TControlChildSizing) InheritsFrom(AClass TClass) bool {
	return ControlChildSizing_InheritsFrom(c.instance, AClass)
}

// 与一个对象进行比较。
//
// Compare with an object.
func (c *TControlChildSizing) Equals(Obj IObject) bool {
	return ControlChildSizing_Equals(c.instance, CheckPtr(Obj))
}

// 获取类的哈希值。
//
// Get the hash value of the class.
func (c *TControlChildSizing) GetHashCode() int32 {
	return ControlChildSizing_GetHashCode(c.instance)
}

// 文本类信息。
//
// Text information.
func (c *TControlChildSizing) ToString() string {
	return ControlChildSizing_ToString(c.instance)
}

func (c *TControlChildSizing) Control() *TWinControl {
	return AsWinControl(ControlChildSizing_GetControl(c.instance))
}

// 设置改变事件。
//
// Set changed event.
func (c *TControlChildSizing) SetOnChange(fn TNotifyEvent) {
	ControlChildSizing_SetOnChange(c.instance, fn)
}

func (c *TControlChildSizing) LeftRightSpacing() int32 {
	return ControlChildSizing_GetLeftRightSpacing(c.instance)
}

func (c *TControlChildSizing) SetLeftRightSpacing(value int32) {
	ControlChildSizing_SetLeftRightSpacing(c.instance, value)
}

func (c *TControlChildSizing) TopBottomSpacing() int32 {
	return ControlChildSizing_GetTopBottomSpacing(c.instance)
}

func (c *TControlChildSizing) SetTopBottomSpacing(value int32) {
	ControlChildSizing_SetTopBottomSpacing(c.instance, value)
}

func (c *TControlChildSizing) HorizontalSpacing() int32 {
	return ControlChildSizing_GetHorizontalSpacing(c.instance)
}

func (c *TControlChildSizing) SetHorizontalSpacing(value int32) {
	ControlChildSizing_SetHorizontalSpacing(c.instance, value)
}

func (c *TControlChildSizing) VerticalSpacing() int32 {
	return ControlChildSizing_GetVerticalSpacing(c.instance)
}

func (c *TControlChildSizing) SetVerticalSpacing(value int32) {
	ControlChildSizing_SetVerticalSpacing(c.instance, value)
}

func (c *TControlChildSizing) EnlargeHorizontal() TChildControlResizeStyle {
	return ControlChildSizing_GetEnlargeHorizontal(c.instance)
}

func (c *TControlChildSizing) SetEnlargeHorizontal(value TChildControlResizeStyle) {
	ControlChildSizing_SetEnlargeHorizontal(c.instance, value)
}

func (c *TControlChildSizing) EnlargeVertical() TChildControlResizeStyle {
	return ControlChildSizing_GetEnlargeVertical(c.instance)
}

func (c *TControlChildSizing) SetEnlargeVertical(value TChildControlResizeStyle) {
	ControlChildSizing_SetEnlargeVertical(c.instance, value)
}

func (c *TControlChildSizing) ShrinkHorizontal() TChildControlResizeStyle {
	return ControlChildSizing_GetShrinkHorizontal(c.instance)
}

func (c *TControlChildSizing) SetShrinkHorizontal(value TChildControlResizeStyle) {
	ControlChildSizing_SetShrinkHorizontal(c.instance, value)
}

func (c *TControlChildSizing) ShrinkVertical() TChildControlResizeStyle {
	return ControlChildSizing_GetShrinkVertical(c.instance)
}

func (c *TControlChildSizing) SetShrinkVertical(value TChildControlResizeStyle) {
	ControlChildSizing_SetShrinkVertical(c.instance, value)
}

func (c *TControlChildSizing) Layout() TControlChildrenLayout {
	return ControlChildSizing_GetLayout(c.instance)
}

func (c *TControlChildSizing) SetLayout(value TControlChildrenLayout) {
	ControlChildSizing_SetLayout(c.instance, value)
}

func (c *TControlChildSizing) ControlsPerLine() int32 {
	return ControlChildSizing_GetControlsPerLine(c.instance)
}

func (c *TControlChildSizing) SetControlsPerLine(value int32) {
	ControlChildSizing_SetControlsPerLine(c.instance, value)
}
