//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	. "github.com/rarnu/golcl/lcl/api"
	. "github.com/rarnu/golcl/lcl/types"
	"unsafe"
)

type TDragDockObject struct {
	IObject
	instance uintptr
	// 特殊情况下使用，主要应对Go的GC问题，与LCL没有太多关系。
	ptr unsafe.Pointer
}

// 创建一个新的对象。
//
// Create a new object.
func NewDragDockObject(AOwner IControl) *TDragDockObject {
	d := new(TDragDockObject)
	d.instance = DragDockObject_Create(CheckPtr(AOwner))
	d.ptr = unsafe.Pointer(d.instance)
	setFinalizer(d, (*TDragDockObject).Free)
	return d
}

// 动态转换一个已存在的对象实例。
//
// Dynamically convert an existing object instance.
func AsDragDockObject(obj any) *TDragDockObject {
	instance, ptr := getInstance(obj)
	if instance == 0 {
		return nil
	}
	return &TDragDockObject{instance: instance, ptr: ptr}
}

// -------------------------- Deprecated begin --------------------------
// 新建一个对象来自已经存在的对象实例指针。
//
// Create a new object from an existing object instance pointer.
// Deprecated: use AsDragDockObject.
func DragDockObjectFromInst(inst uintptr) *TDragDockObject {
	return AsDragDockObject(inst)
}

// 新建一个对象来自已经存在的对象实例。
//
// Create a new object from an existing object instance.
// Deprecated: use AsDragDockObject.
func DragDockObjectFromObj(obj IObject) *TDragDockObject {
	return AsDragDockObject(obj)
}

// 新建一个对象来自不安全的地址。注意：使用此函数可能造成一些不明情况，慎用。
//
// Create a new object from an unsecured address. Note: Using this function may cause some unclear situations and be used with caution..
// Deprecated: use AsDragDockObject.
func DragDockObjectFromUnsafePointer(ptr unsafe.Pointer) *TDragDockObject {
	return AsDragDockObject(ptr)
}

// -------------------------- Deprecated end --------------------------
// 释放对象。
//
// Free object.
func (d *TDragDockObject) Free() {
	if d.instance != 0 {
		DragDockObject_Free(d.instance)
		d.instance, d.ptr = 0, nullptr
	}
}

// 返回对象实例指针。
//
// Return object instance pointer.
func (d *TDragDockObject) Instance() uintptr {
	return d.instance
}

// 获取一个不安全的地址。
//
// Get an unsafe address.
func (d *TDragDockObject) UnsafeAddr() unsafe.Pointer {
	return d.ptr
}

// 检测地址是否为空。
//
// Check if the address is empty.
func (d *TDragDockObject) IsValid() bool {
	return d.instance != 0
}

// 检测当前对象是否继承自目标对象。
//
// Checks whether the current object is inherited from the target object.
func (d *TDragDockObject) Is() TIs {
	return TIs(d.instance)
}

// 动态转换当前对象为目标对象。
//
// Dynamically convert the current object to the target object.
//func (d *TDragDockObject) As() TAs {
//    return TAs(d.instance)
//}

// 获取类信息指针。
//
// Get class information pointer.
func TDragDockObjectClass() TClass {
	return DragDockObject_StaticClassType()
}

// 复制一个对象，如果对象实现了此方法的话。
//
// Copy an object, if the object implements this method.
func (d *TDragDockObject) Assign(Source *TDragObject) {
	DragDockObject_Assign(d.instance, CheckPtr(Source))
}

func (d *TDragDockObject) HideDragImage() {
	DragDockObject_HideDragImage(d.instance)
}

func (d *TDragDockObject) ShowDragImage() {
	DragDockObject_ShowDragImage(d.instance)
}

// 获取类的类型信息。
//
// Get class type information.
func (d *TDragDockObject) ClassType() TClass {
	return DragDockObject_ClassType(d.instance)
}

// 获取当前对象类名称。
//
// Get the current object class name.
func (d *TDragDockObject) ClassName() string {
	return DragDockObject_ClassName(d.instance)
}

// 获取当前对象实例大小。
//
// Get the current object instance size.
func (d *TDragDockObject) InstanceSize() int32 {
	return DragDockObject_InstanceSize(d.instance)
}

// 判断当前类是否继承自指定类。
//
// Determine whether the current class inherits from the specified class.
func (d *TDragDockObject) InheritsFrom(AClass TClass) bool {
	return DragDockObject_InheritsFrom(d.instance, AClass)
}

// 与一个对象进行比较。
//
// Compare with an object.
func (d *TDragDockObject) Equals(Obj IObject) bool {
	return DragDockObject_Equals(d.instance, CheckPtr(Obj))
}

// 获取类的哈希值。
//
// Get the hash value of the class.
func (d *TDragDockObject) GetHashCode() int32 {
	return DragDockObject_GetHashCode(d.instance)
}

// 文本类信息。
//
// Text information.
func (d *TDragDockObject) ToString() string {
	return DragDockObject_ToString(d.instance)
}

func (d *TDragDockObject) DockRect() TRect {
	return DragDockObject_GetDockRect(d.instance)
}

func (d *TDragDockObject) SetDockRect(value TRect) {
	DragDockObject_SetDockRect(d.instance, value)
}

func (d *TDragDockObject) DropAlign() TAlign {
	return DragDockObject_GetDropAlign(d.instance)
}

func (d *TDragDockObject) DropOnControl() *TControl {
	return AsControl(DragDockObject_GetDropOnControl(d.instance))
}

func (d *TDragDockObject) EraseDockRect() TRect {
	return DragDockObject_GetEraseDockRect(d.instance)
}

func (d *TDragDockObject) SetEraseDockRect(value TRect) {
	DragDockObject_SetEraseDockRect(d.instance, value)
}

func (d *TDragDockObject) Floating() bool {
	return DragDockObject_GetFloating(d.instance)
}

func (d *TDragDockObject) SetFloating(value bool) {
	DragDockObject_SetFloating(d.instance, value)
}

func (d *TDragDockObject) Control() *TControl {
	return AsControl(DragDockObject_GetControl(d.instance))
}

func (d *TDragDockObject) SetControl(value IControl) {
	DragDockObject_SetControl(d.instance, CheckPtr(value))
}

func (d *TDragDockObject) AlwaysShowDragImages() bool {
	return DragDockObject_GetAlwaysShowDragImages(d.instance)
}

func (d *TDragDockObject) SetAlwaysShowDragImages(value bool) {
	DragDockObject_SetAlwaysShowDragImages(d.instance, value)
}

func (d *TDragDockObject) DragPos() TPoint {
	return DragDockObject_GetDragPos(d.instance)
}

func (d *TDragDockObject) SetDragPos(value TPoint) {
	DragDockObject_SetDragPos(d.instance, value)
}

func (d *TDragDockObject) DragTarget() uintptr {
	return DragDockObject_GetDragTarget(d.instance)
}

func (d *TDragDockObject) SetDragTarget(value uintptr) {
	DragDockObject_SetDragTarget(d.instance, value)
}

func (d *TDragDockObject) DragTargetPos() TPoint {
	return DragDockObject_GetDragTargetPos(d.instance)
}

func (d *TDragDockObject) SetDragTargetPos(value TPoint) {
	DragDockObject_SetDragTargetPos(d.instance, value)
}

func (d *TDragDockObject) Dropped() bool {
	return DragDockObject_GetDropped(d.instance)
}
