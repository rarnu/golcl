//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	. "github.com/rarnu/golcl/lcl/api"
	. "github.com/rarnu/golcl/lcl/types"
	"unsafe"
)

type TListColumn struct {
	IObject
	instance uintptr
	// 特殊情况下使用，主要应对Go的GC问题，与LCL没有太多关系。
	ptr unsafe.Pointer
}

// 创建一个新的对象。
//
// Create a new object.
func NewListColumn(AOwner *TCollection) *TListColumn {
	l := new(TListColumn)
	l.instance = ListColumn_Create(CheckPtr(AOwner))
	l.ptr = unsafe.Pointer(l.instance)
	setFinalizer(l, (*TListColumn).Free)
	return l
}

// 动态转换一个已存在的对象实例。
//
// Dynamically convert an existing object instance.
func AsListColumn(obj any) *TListColumn {
	instance, ptr := getInstance(obj)
	if instance == 0 {
		return nil
	}
	return &TListColumn{instance: instance, ptr: ptr}
}

// -------------------------- Deprecated begin --------------------------
// 新建一个对象来自已经存在的对象实例指针。
//
// Create a new object from an existing object instance pointer.
// Deprecated: use AsListColumn.
func ListColumnFromInst(inst uintptr) *TListColumn {
	return AsListColumn(inst)
}

// 新建一个对象来自已经存在的对象实例。
//
// Create a new object from an existing object instance.
// Deprecated: use AsListColumn.
func ListColumnFromObj(obj IObject) *TListColumn {
	return AsListColumn(obj)
}

// 新建一个对象来自不安全的地址。注意：使用此函数可能造成一些不明情况，慎用。
//
// Create a new object from an unsecured address. Note: Using this function may cause some unclear situations and be used with caution..
// Deprecated: use AsListColumn.
func ListColumnFromUnsafePointer(ptr unsafe.Pointer) *TListColumn {
	return AsListColumn(ptr)
}

// -------------------------- Deprecated end --------------------------
// 释放对象。
//
// Free object.
func (l *TListColumn) Free() {
	if l.instance != 0 {
		ListColumn_Free(l.instance)
		l.instance, l.ptr = 0, nullptr
	}
}

// 返回对象实例指针。
//
// Return object instance pointer.
func (l *TListColumn) Instance() uintptr {
	return l.instance
}

// 获取一个不安全的地址。
//
// Get an unsafe address.
func (l *TListColumn) UnsafeAddr() unsafe.Pointer {
	return l.ptr
}

// 检测地址是否为空。
//
// Check if the address is empty.
func (l *TListColumn) IsValid() bool {
	return l.instance != 0
}

// 检测当前对象是否继承自目标对象。
//
// Checks whether the current object is inherited from the target object.
func (l *TListColumn) Is() TIs {
	return TIs(l.instance)
}

// 动态转换当前对象为目标对象。
//
// Dynamically convert the current object to the target object.
//func (l *TListColumn) As() TAs {
//    return TAs(l.instance)
//}

// 获取类信息指针。
//
// Get class information pointer.
func TListColumnClass() TClass {
	return ListColumn_StaticClassType()
}

// 复制一个对象，如果对象实现了此方法的话。
//
// Copy an object, if the object implements this method.
func (l *TListColumn) Assign(Source IObject) {
	ListColumn_Assign(l.instance, CheckPtr(Source))
}

// 获取类名路径。
//
// Get the class name path.
func (l *TListColumn) GetNamePath() string {
	return ListColumn_GetNamePath(l.instance)
}

// 获取类的类型信息。
//
// Get class type information.
func (l *TListColumn) ClassType() TClass {
	return ListColumn_ClassType(l.instance)
}

// 获取当前对象类名称。
//
// Get the current object class name.
func (l *TListColumn) ClassName() string {
	return ListColumn_ClassName(l.instance)
}

// 获取当前对象实例大小。
//
// Get the current object instance size.
func (l *TListColumn) InstanceSize() int32 {
	return ListColumn_InstanceSize(l.instance)
}

// 判断当前类是否继承自指定类。
//
// Determine whether the current class inherits from the specified class.
func (l *TListColumn) InheritsFrom(AClass TClass) bool {
	return ListColumn_InheritsFrom(l.instance, AClass)
}

// 与一个对象进行比较。
//
// Compare with an object.
func (l *TListColumn) Equals(Obj IObject) bool {
	return ListColumn_Equals(l.instance, CheckPtr(Obj))
}

// 获取类的哈希值。
//
// Get the hash value of the class.
func (l *TListColumn) GetHashCode() int32 {
	return ListColumn_GetHashCode(l.instance)
}

// 文本类信息。
//
// Text information.
func (l *TListColumn) ToString() string {
	return ListColumn_ToString(l.instance)
}

func (l *TListColumn) SortIndicator() TSortIndicator {
	return ListColumn_GetSortIndicator(l.instance)
}

func (l *TListColumn) SetSortIndicator(value TSortIndicator) {
	ListColumn_SetSortIndicator(l.instance, value)
}

// 获取文字对齐。
//
// Get Text alignment.
func (l *TListColumn) Alignment() TAlignment {
	return ListColumn_GetAlignment(l.instance)
}

// 设置文字对齐。
//
// Set Text alignment.
func (l *TListColumn) SetAlignment(value TAlignment) {
	ListColumn_SetAlignment(l.instance, value)
}

// 获取自动调整大小。
func (l *TListColumn) AutoSize() bool {
	return ListColumn_GetAutoSize(l.instance)
}

// 设置自动调整大小。
func (l *TListColumn) SetAutoSize(value bool) {
	ListColumn_SetAutoSize(l.instance, value)
}

// 获取控件标题。
//
// Get the control title.
func (l *TListColumn) Caption() string {
	return ListColumn_GetCaption(l.instance)
}

// 设置控件标题。
//
// Set the control title.
func (l *TListColumn) SetCaption(value string) {
	ListColumn_SetCaption(l.instance, value)
}

// 获取图像在images中的索引。
func (l *TListColumn) ImageIndex() int32 {
	return ListColumn_GetImageIndex(l.instance)
}

// 设置图像在images中的索引。
func (l *TListColumn) SetImageIndex(value int32) {
	ListColumn_SetImageIndex(l.instance, value)
}

func (l *TListColumn) MaxWidth() int32 {
	return ListColumn_GetMaxWidth(l.instance)
}

func (l *TListColumn) SetMaxWidth(value int32) {
	ListColumn_SetMaxWidth(l.instance, value)
}

func (l *TListColumn) MinWidth() int32 {
	return ListColumn_GetMinWidth(l.instance)
}

func (l *TListColumn) SetMinWidth(value int32) {
	ListColumn_SetMinWidth(l.instance, value)
}

// 获取对象标记。
//
// Get the control tag.
func (l *TListColumn) Tag() int32 {
	return ListColumn_GetTag(l.instance)
}

// 设置对象标记。
//
// Set the control tag.
func (l *TListColumn) SetTag(value int32) {
	ListColumn_SetTag(l.instance, value)
}

// 获取宽度。
//
// Get width.
func (l *TListColumn) Width() int32 {
	return ListColumn_GetWidth(l.instance)
}

// 设置宽度。
//
// Set width.
func (l *TListColumn) SetWidth(value int32) {
	ListColumn_SetWidth(l.instance, value)
}

func (l *TListColumn) Collection() *TCollection {
	return AsCollection(ListColumn_GetCollection(l.instance))
}

func (l *TListColumn) SetCollection(value *TCollection) {
	ListColumn_SetCollection(l.instance, CheckPtr(value))
}

func (l *TListColumn) Index() int32 {
	return ListColumn_GetIndex(l.instance)
}

func (l *TListColumn) SetIndex(value int32) {
	ListColumn_SetIndex(l.instance, value)
}

func (l *TListColumn) DisplayName() string {
	return ListColumn_GetDisplayName(l.instance)
}

func (l *TListColumn) SetDisplayName(value string) {
	ListColumn_SetDisplayName(l.instance, value)
}
