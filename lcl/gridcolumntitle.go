//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
// 
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	. "github.com/rarnu/golcl/lcl/api"
	. "github.com/rarnu/golcl/lcl/types"
	"unsafe"
)

type TGridColumnTitle struct {
	IObject
	instance uintptr
	// 特殊情况下使用，主要应对Go的GC问题，与LCL没有太多关系。
	ptr unsafe.Pointer
}

// 动态转换一个已存在的对象实例。
// 
// Dynamically convert an existing object instance.
func AsGridColumnTitle(obj interface{}) *TGridColumnTitle {
	instance, ptr := getInstance(obj)
	if instance == 0 {
		return nil
	}
	return &TGridColumnTitle{instance: instance, ptr: ptr}
}

// -------------------------- Deprecated begin --------------------------
// 新建一个对象来自已经存在的对象实例指针。
// 
// Create a new object from an existing object instance pointer.
// Deprecated: use AsGridColumnTitle.
func GridColumnTitleFromInst(inst uintptr) *TGridColumnTitle {
	return AsGridColumnTitle(inst)
}

// 新建一个对象来自已经存在的对象实例。
// 
// Create a new object from an existing object instance.
// Deprecated: use AsGridColumnTitle.
func GridColumnTitleFromObj(obj IObject) *TGridColumnTitle {
	return AsGridColumnTitle(obj)
}

// 新建一个对象来自不安全的地址。注意：使用此函数可能造成一些不明情况，慎用。
// 
// Create a new object from an unsecured address. Note: Using this function may cause some unclear situations and be used with caution..
// Deprecated: use AsGridColumnTitle.
func GridColumnTitleFromUnsafePointer(ptr unsafe.Pointer) *TGridColumnTitle {
	return AsGridColumnTitle(ptr)
}

// -------------------------- Deprecated end --------------------------
// 返回对象实例指针。
// 
// Return object instance pointer.
func (g *TGridColumnTitle) Instance() uintptr {
	return g.instance
}

// 获取一个不安全的地址。
// 
// Get an unsafe address.
func (g *TGridColumnTitle) UnsafeAddr() unsafe.Pointer {
	return g.ptr
}

// 检测地址是否为空。
// 
// Check if the address is empty.
func (g *TGridColumnTitle) IsValid() bool {
	return g.instance != 0
}

// 检测当前对象是否继承自目标对象。
// 
// Checks whether the current object is inherited from the target object.
func (g *TGridColumnTitle) Is() TIs {
	return TIs(g.instance)
}

// 动态转换当前对象为目标对象。
// 
// Dynamically convert the current object to the target object.
//func (g *TGridColumnTitle) As() TAs {
//    return TAs(g.instance)
//}

// 获取类信息指针。
// 
// Get class information pointer.
func TGridColumnTitleClass() TClass {
	return GridColumnTitle_StaticClassType()
}

// 复制一个对象，如果对象实现了此方法的话。
//
// Copy an object, if the object implements this method.
func (g *TGridColumnTitle) Assign(Source IObject) {
	GridColumnTitle_Assign(g.instance, CheckPtr(Source))
}

func (g *TGridColumnTitle) FillTitleDefaultFont() {
	GridColumnTitle_FillTitleDefaultFont(g.instance)
}

func (g *TGridColumnTitle) FixDesignFontsPPI(ADesignTimePPI int32) {
	GridColumnTitle_FixDesignFontsPPI(g.instance, ADesignTimePPI)
}

func (g *TGridColumnTitle) ScaleFontsPPI(AToPPI int32, AProportion float64) {
	GridColumnTitle_ScaleFontsPPI(g.instance, AToPPI, AProportion)
}

func (g *TGridColumnTitle) IsDefault() bool {
	return GridColumnTitle_IsDefault(g.instance)
}

// 获取类名路径。
//
// Get the class name path.
func (g *TGridColumnTitle) GetNamePath() string {
	return GridColumnTitle_GetNamePath(g.instance)
}

// 获取类的类型信息。
//
// Get class type information.
func (g *TGridColumnTitle) ClassType() TClass {
	return GridColumnTitle_ClassType(g.instance)
}

// 获取当前对象类名称。
//
// Get the current object class name.
func (g *TGridColumnTitle) ClassName() string {
	return GridColumnTitle_ClassName(g.instance)
}

// 获取当前对象实例大小。
//
// Get the current object instance size.
func (g *TGridColumnTitle) InstanceSize() int32 {
	return GridColumnTitle_InstanceSize(g.instance)
}

// 判断当前类是否继承自指定类。
//
// Determine whether the current class inherits from the specified class.
func (g *TGridColumnTitle) InheritsFrom(AClass TClass) bool {
	return GridColumnTitle_InheritsFrom(g.instance, AClass)
}

// 与一个对象进行比较。
//
// Compare with an object.
func (g *TGridColumnTitle) Equals(Obj IObject) bool {
	return GridColumnTitle_Equals(g.instance, CheckPtr(Obj))
}

// 获取类的哈希值。
//
// Get the hash value of the class.
func (g *TGridColumnTitle) GetHashCode() int32 {
	return GridColumnTitle_GetHashCode(g.instance)
}

// 文本类信息。
//
// Text information.
func (g *TGridColumnTitle) ToString() string {
	return GridColumnTitle_ToString(g.instance)
}

func (g *TGridColumnTitle) Column() *TGridColumn {
	return AsGridColumn(GridColumnTitle_GetColumn(g.instance))
}

// 获取文字对齐。
//
// Get Text alignment.
func (g *TGridColumnTitle) Alignment() TAlignment {
	return GridColumnTitle_GetAlignment(g.instance)
}

// 设置文字对齐。
//
// Set Text alignment.
func (g *TGridColumnTitle) SetAlignment(value TAlignment) {
	GridColumnTitle_SetAlignment(g.instance, value)
}

// 获取控件标题。
//
// Get the control title.
func (g *TGridColumnTitle) Caption() string {
	return GridColumnTitle_GetCaption(g.instance)
}

// 设置控件标题。
//
// Set the control title.
func (g *TGridColumnTitle) SetCaption(value string) {
	GridColumnTitle_SetCaption(g.instance, value)
}

// 获取颜色。
//
// Get color.
func (g *TGridColumnTitle) Color() TColor {
	return GridColumnTitle_GetColor(g.instance)
}

// 设置颜色。
//
// Set color.
func (g *TGridColumnTitle) SetColor(value TColor) {
	GridColumnTitle_SetColor(g.instance, value)
}

// 获取字体。
//
// Get Font.
func (g *TGridColumnTitle) Font() *TFont {
	return AsFont(GridColumnTitle_GetFont(g.instance))
}

// 设置字体。
//
// Set Font.
func (g *TGridColumnTitle) SetFont(value *TFont) {
	GridColumnTitle_SetFont(g.instance, CheckPtr(value))
}

// 获取图像在images中的索引。
func (g *TGridColumnTitle) ImageIndex() int32 {
	return GridColumnTitle_GetImageIndex(g.instance)
}

// 设置图像在images中的索引。
func (g *TGridColumnTitle) SetImageIndex(value int32) {
	GridColumnTitle_SetImageIndex(g.instance, value)
}

func (g *TGridColumnTitle) ImageLayout() TButtonLayout {
	return GridColumnTitle_GetImageLayout(g.instance)
}

func (g *TGridColumnTitle) SetImageLayout(value TButtonLayout) {
	GridColumnTitle_SetImageLayout(g.instance, value)
}

func (g *TGridColumnTitle) Layout() TTextLayout {
	return GridColumnTitle_GetLayout(g.instance)
}

func (g *TGridColumnTitle) SetLayout(value TTextLayout) {
	GridColumnTitle_SetLayout(g.instance, value)
}

func (g *TGridColumnTitle) MultiLine() bool {
	return GridColumnTitle_GetMultiLine(g.instance)
}

func (g *TGridColumnTitle) SetMultiLine(value bool) {
	GridColumnTitle_SetMultiLine(g.instance, value)
}

func (g *TGridColumnTitle) PrefixOption() TPrefixOption {
	return GridColumnTitle_GetPrefixOption(g.instance)
}

func (g *TGridColumnTitle) SetPrefixOption(value TPrefixOption) {
	GridColumnTitle_SetPrefixOption(g.instance, value)
}

