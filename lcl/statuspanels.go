//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	. "github.com/rarnu/golcl/lcl/api"
	. "github.com/rarnu/golcl/lcl/types"
	"unsafe"
)

type TStatusPanels struct {
	IObject
	instance uintptr
	// 特殊情况下使用，主要应对Go的GC问题，与LCL没有太多关系。
	ptr unsafe.Pointer
}

// 创建一个新的对象。
//
// Create a new object.
func NewStatusPanels(AOwner *TStatusBar) *TStatusPanels {
	s := new(TStatusPanels)
	s.instance = StatusPanels_Create(CheckPtr(AOwner))
	s.ptr = unsafe.Pointer(s.instance)
	setFinalizer(s, (*TStatusPanels).Free)
	return s
}

// 动态转换一个已存在的对象实例。
//
// Dynamically convert an existing object instance.
func AsStatusPanels(obj interface{}) *TStatusPanels {
	instance, ptr := getInstance(obj)
	if instance == 0 {
		return nil
	}
	return &TStatusPanels{instance: instance, ptr: ptr}
}

// -------------------------- Deprecated begin --------------------------
// 新建一个对象来自已经存在的对象实例指针。
//
// Create a new object from an existing object instance pointer.
// Deprecated: use AsStatusPanels.
func StatusPanelsFromInst(inst uintptr) *TStatusPanels {
	return AsStatusPanels(inst)
}

// 新建一个对象来自已经存在的对象实例。
//
// Create a new object from an existing object instance.
// Deprecated: use AsStatusPanels.
func StatusPanelsFromObj(obj IObject) *TStatusPanels {
	return AsStatusPanels(obj)
}

// 新建一个对象来自不安全的地址。注意：使用此函数可能造成一些不明情况，慎用。
//
// Create a new object from an unsecured address. Note: Using this function may cause some unclear situations and be used with caution..
// Deprecated: use AsStatusPanels.
func StatusPanelsFromUnsafePointer(ptr unsafe.Pointer) *TStatusPanels {
	return AsStatusPanels(ptr)
}

// -------------------------- Deprecated end --------------------------
// 释放对象。
//
// Free object.
func (s *TStatusPanels) Free() {
	if s.instance != 0 {
		StatusPanels_Free(s.instance)
		s.instance, s.ptr = 0, nullptr
	}
}

// 返回对象实例指针。
//
// Return object instance pointer.
func (s *TStatusPanels) Instance() uintptr {
	return s.instance
}

// 获取一个不安全的地址。
//
// Get an unsafe address.
func (s *TStatusPanels) UnsafeAddr() unsafe.Pointer {
	return s.ptr
}

// 检测地址是否为空。
//
// Check if the address is empty.
func (s *TStatusPanels) IsValid() bool {
	return s.instance != 0
}

// 检测当前对象是否继承自目标对象。
//
// Checks whether the current object is inherited from the target object.
func (s *TStatusPanels) Is() TIs {
	return TIs(s.instance)
}

// 动态转换当前对象为目标对象。
//
// Dynamically convert the current object to the target object.
//func (s *TStatusPanels) As() TAs {
//    return TAs(s.instance)
//}

// 获取类信息指针。
//
// Get class information pointer.
func TStatusPanelsClass() TClass {
	return StatusPanels_StaticClassType()
}

func (s *TStatusPanels) Add() *TStatusPanel {
	return AsStatusPanel(StatusPanels_Add(s.instance))
}

func (s *TStatusPanels) Insert(Index int32) *TStatusPanel {
	return AsStatusPanel(StatusPanels_Insert(s.instance, Index))
}

// 组件所有者。
//
// component owner.
func (s *TStatusPanels) Owner() *TObject {
	return AsObject(StatusPanels_Owner(s.instance))
}

// 复制一个对象，如果对象实现了此方法的话。
//
// Copy an object, if the object implements this method.
func (s *TStatusPanels) Assign(Source IObject) {
	StatusPanels_Assign(s.instance, CheckPtr(Source))
}

func (s *TStatusPanels) BeginUpdate() {
	StatusPanels_BeginUpdate(s.instance)
}

// 清除。
func (s *TStatusPanels) Clear() {
	StatusPanels_Clear(s.instance)
}

func (s *TStatusPanels) Delete(Index int32) {
	StatusPanels_Delete(s.instance, Index)
}

func (s *TStatusPanels) EndUpdate() {
	StatusPanels_EndUpdate(s.instance)
}

func (s *TStatusPanels) FindItemID(ID int32) *TCollectionItem {
	return AsCollectionItem(StatusPanels_FindItemID(s.instance, ID))
}

// 获取类名路径。
//
// Get the class name path.
func (s *TStatusPanels) GetNamePath() string {
	return StatusPanels_GetNamePath(s.instance)
}

// 获取类的类型信息。
//
// Get class type information.
func (s *TStatusPanels) ClassType() TClass {
	return StatusPanels_ClassType(s.instance)
}

// 获取当前对象类名称。
//
// Get the current object class name.
func (s *TStatusPanels) ClassName() string {
	return StatusPanels_ClassName(s.instance)
}

// 获取当前对象实例大小。
//
// Get the current object instance size.
func (s *TStatusPanels) InstanceSize() int32 {
	return StatusPanels_InstanceSize(s.instance)
}

// 判断当前类是否继承自指定类。
//
// Determine whether the current class inherits from the specified class.
func (s *TStatusPanels) InheritsFrom(AClass TClass) bool {
	return StatusPanels_InheritsFrom(s.instance, AClass)
}

// 与一个对象进行比较。
//
// Compare with an object.
func (s *TStatusPanels) Equals(Obj IObject) bool {
	return StatusPanels_Equals(s.instance, CheckPtr(Obj))
}

// 获取类的哈希值。
//
// Get the hash value of the class.
func (s *TStatusPanels) GetHashCode() int32 {
	return StatusPanels_GetHashCode(s.instance)
}

// 文本类信息。
//
// Text information.
func (s *TStatusPanels) ToString() string {
	return StatusPanels_ToString(s.instance)
}

func (s *TStatusPanels) Capacity() int32 {
	return StatusPanels_GetCapacity(s.instance)
}

func (s *TStatusPanels) SetCapacity(value int32) {
	StatusPanels_SetCapacity(s.instance, value)
}

func (s *TStatusPanels) Count() int32 {
	return StatusPanels_GetCount(s.instance)
}

func (s *TStatusPanels) Items(Index int32) *TStatusPanel {
	return AsStatusPanel(StatusPanels_GetItems(s.instance, Index))
}

func (s *TStatusPanels) SetItems(Index int32, value *TStatusPanel) {
	StatusPanels_SetItems(s.instance, Index, CheckPtr(value))
}
