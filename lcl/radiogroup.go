//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	. "github.com/rarnu/golcl/lcl/api"
	. "github.com/rarnu/golcl/lcl/types"
	"unsafe"
)

type TRadioGroup struct {
	IWinControl
	instance uintptr
	// 特殊情况下使用，主要应对Go的GC问题，与LCL没有太多关系。
	ptr unsafe.Pointer
}

// 创建一个新的对象。
//
// Create a new object.
func NewRadioGroup(owner IComponent) *TRadioGroup {
	r := new(TRadioGroup)
	r.instance = RadioGroup_Create(CheckPtr(owner))
	r.ptr = unsafe.Pointer(r.instance)
	return r
}

// 动态转换一个已存在的对象实例。
//
// Dynamically convert an existing object instance.
func AsRadioGroup(obj any) *TRadioGroup {
	instance, ptr := getInstance(obj)
	if instance == 0 {
		return nil
	}
	return &TRadioGroup{instance: instance, ptr: ptr}
}

// -------------------------- Deprecated begin --------------------------
// 新建一个对象来自已经存在的对象实例指针。
//
// Create a new object from an existing object instance pointer.
// Deprecated: use AsRadioGroup.
func RadioGroupFromInst(inst uintptr) *TRadioGroup {
	return AsRadioGroup(inst)
}

// 新建一个对象来自已经存在的对象实例。
//
// Create a new object from an existing object instance.
// Deprecated: use AsRadioGroup.
func RadioGroupFromObj(obj IObject) *TRadioGroup {
	return AsRadioGroup(obj)
}

// 新建一个对象来自不安全的地址。注意：使用此函数可能造成一些不明情况，慎用。
//
// Create a new object from an unsecured address. Note: Using this function may cause some unclear situations and be used with caution..
// Deprecated: use AsRadioGroup.
func RadioGroupFromUnsafePointer(ptr unsafe.Pointer) *TRadioGroup {
	return AsRadioGroup(ptr)
}

// -------------------------- Deprecated end --------------------------
// 释放对象。
//
// Free object.
func (r *TRadioGroup) Free() {
	if r.instance != 0 {
		RadioGroup_Free(r.instance)
		r.instance, r.ptr = 0, nullptr
	}
}

// 返回对象实例指针。
//
// Return object instance pointer.
func (r *TRadioGroup) Instance() uintptr {
	return r.instance
}

// 获取一个不安全的地址。
//
// Get an unsafe address.
func (r *TRadioGroup) UnsafeAddr() unsafe.Pointer {
	return r.ptr
}

// 检测地址是否为空。
//
// Check if the address is empty.
func (r *TRadioGroup) IsValid() bool {
	return r.instance != 0
}

// 检测当前对象是否继承自目标对象。
//
// Checks whether the current object is inherited from the target object.
func (r *TRadioGroup) Is() TIs {
	return TIs(r.instance)
}

// 动态转换当前对象为目标对象。
//
// Dynamically convert the current object to the target object.
//func (r *TRadioGroup) As() TAs {
//    return TAs(r.instance)
//}

// 获取类信息指针。
//
// Get class information pointer.
func TRadioGroupClass() TClass {
	return RadioGroup_StaticClassType()
}

func (r *TRadioGroup) FlipChildren(AllLevels bool) {
	RadioGroup_FlipChildren(r.instance, AllLevels)
}

// 是否可以获得焦点。
func (r *TRadioGroup) CanFocus() bool {
	return RadioGroup_CanFocus(r.instance)
}

// 返回是否包含指定控件。
//
// it's contain a specified control.
func (r *TRadioGroup) ContainsControl(Control IControl) bool {
	return RadioGroup_ContainsControl(r.instance, CheckPtr(Control))
}

// 返回指定坐标及相关属性位置控件。
//
// Returns the specified coordinate and the relevant attribute position control..
func (r *TRadioGroup) ControlAtPos(Pos TPoint, AllowDisabled bool, AllowWinControls bool, AllLevels bool) *TControl {
	return AsControl(RadioGroup_ControlAtPos(r.instance, Pos, AllowDisabled, AllowWinControls, AllLevels))
}

// 禁用控件的对齐。
//
// Disable control alignment.
func (r *TRadioGroup) DisableAlign() {
	RadioGroup_DisableAlign(r.instance)
}

// 启用控件对齐。
//
// Enabled control alignment.
func (r *TRadioGroup) EnableAlign() {
	RadioGroup_EnableAlign(r.instance)
}

// 查找子控件。
//
// Find sub controls.
func (r *TRadioGroup) FindChildControl(ControlName string) *TControl {
	return AsControl(RadioGroup_FindChildControl(r.instance, ControlName))
}

// 返回是否获取焦点。
//
// Return to get focus.
func (r *TRadioGroup) Focused() bool {
	return RadioGroup_Focused(r.instance)
}

// 句柄是否已经分配。
//
// Is the handle already allocated.
func (r *TRadioGroup) HandleAllocated() bool {
	return RadioGroup_HandleAllocated(r.instance)
}

// 插入一个控件。
//
// Insert a control.
func (r *TRadioGroup) InsertControl(AControl IControl) {
	RadioGroup_InsertControl(r.instance, CheckPtr(AControl))
}

// 要求重绘。
//
// Redraw.
func (r *TRadioGroup) Invalidate() {
	RadioGroup_Invalidate(r.instance)
}

// 绘画至指定DC。
//
// Painting to the specified DC.
func (r *TRadioGroup) PaintTo(DC HDC, X int32, Y int32) {
	RadioGroup_PaintTo(r.instance, DC, X, Y)
}

// 移除一个控件。
//
// Remove a control.
func (r *TRadioGroup) RemoveControl(AControl IControl) {
	RadioGroup_RemoveControl(r.instance, CheckPtr(AControl))
}

// 重新对齐。
//
// Realign.
func (r *TRadioGroup) Realign() {
	RadioGroup_Realign(r.instance)
}

// 重绘。
//
// Repaint.
func (r *TRadioGroup) Repaint() {
	RadioGroup_Repaint(r.instance)
}

// 按比例缩放。
//
// Scale by.
func (r *TRadioGroup) ScaleBy(M int32, D int32) {
	RadioGroup_ScaleBy(r.instance, M, D)
}

// 滚动至指定位置。
//
// Scroll by.
func (r *TRadioGroup) ScrollBy(DeltaX int32, DeltaY int32) {
	RadioGroup_ScrollBy(r.instance, DeltaX, DeltaY)
}

// 设置组件边界。
//
// Set component boundaries.
func (r *TRadioGroup) SetBounds(ALeft int32, ATop int32, AWidth int32, AHeight int32) {
	RadioGroup_SetBounds(r.instance, ALeft, ATop, AWidth, AHeight)
}

// 设置控件焦点。
//
// Set control focus.
func (r *TRadioGroup) SetFocus() {
	RadioGroup_SetFocus(r.instance)
}

// 控件更新。
//
// Update.
func (r *TRadioGroup) Update() {
	RadioGroup_Update(r.instance)
}

// 将控件置于最前。
//
// Bring the control to the front.
func (r *TRadioGroup) BringToFront() {
	RadioGroup_BringToFront(r.instance)
}

// 将客户端坐标转为绝对的屏幕坐标。
//
// Convert client coordinates to absolute screen coordinates.
func (r *TRadioGroup) ClientToScreen(Point TPoint) TPoint {
	return RadioGroup_ClientToScreen(r.instance, Point)
}

// 将客户端坐标转为父容器坐标。
//
// Convert client coordinates to parent container coordinates.
func (r *TRadioGroup) ClientToParent(Point TPoint, AParent IWinControl) TPoint {
	return RadioGroup_ClientToParent(r.instance, Point, CheckPtr(AParent))
}

// 是否在拖拽中。
//
// Is it in the middle of dragging.
func (r *TRadioGroup) Dragging() bool {
	return RadioGroup_Dragging(r.instance)
}

// 是否有父容器。
//
// Is there a parent container.
func (r *TRadioGroup) HasParent() bool {
	return RadioGroup_HasParent(r.instance)
}

// 隐藏控件。
//
// Hidden control.
func (r *TRadioGroup) Hide() {
	RadioGroup_Hide(r.instance)
}

// 发送一个消息。
//
// Send a message.
func (r *TRadioGroup) Perform(Msg uint32, WParam uintptr, LParam int) int {
	return RadioGroup_Perform(r.instance, Msg, WParam, LParam)
}

// 刷新控件。
//
// Refresh control.
func (r *TRadioGroup) Refresh() {
	RadioGroup_Refresh(r.instance)
}

// 将屏幕坐标转为客户端坐标。
//
// Convert screen coordinates to client coordinates.
func (r *TRadioGroup) ScreenToClient(Point TPoint) TPoint {
	return RadioGroup_ScreenToClient(r.instance, Point)
}

// 将父容器坐标转为客户端坐标。
//
// Convert parent container coordinates to client coordinates.
func (r *TRadioGroup) ParentToClient(Point TPoint, AParent IWinControl) TPoint {
	return RadioGroup_ParentToClient(r.instance, Point, CheckPtr(AParent))
}

// 控件至于最后面。
//
// The control is placed at the end.
func (r *TRadioGroup) SendToBack() {
	RadioGroup_SendToBack(r.instance)
}

// 显示控件。
//
// Show control.
func (r *TRadioGroup) Show() {
	RadioGroup_Show(r.instance)
}

// 获取控件的字符，如果有。
//
// Get the characters of the control, if any.
func (r *TRadioGroup) GetTextBuf(Buffer *string, BufSize int32) int32 {
	return RadioGroup_GetTextBuf(r.instance, Buffer, BufSize)
}

// 获取控件的字符长，如果有。
//
// Get the character length of the control, if any.
func (r *TRadioGroup) GetTextLen() int32 {
	return RadioGroup_GetTextLen(r.instance)
}

// 设置控件字符，如果有。
//
// Set control characters, if any.
func (r *TRadioGroup) SetTextBuf(Buffer string) {
	RadioGroup_SetTextBuf(r.instance, Buffer)
}

// 查找指定名称的组件。
//
// Find the component with the specified name.
func (r *TRadioGroup) FindComponent(AName string) *TComponent {
	return AsComponent(RadioGroup_FindComponent(r.instance, AName))
}

// 获取类名路径。
//
// Get the class name path.
func (r *TRadioGroup) GetNamePath() string {
	return RadioGroup_GetNamePath(r.instance)
}

// 复制一个对象，如果对象实现了此方法的话。
//
// Copy an object, if the object implements this method.
func (r *TRadioGroup) Assign(Source IObject) {
	RadioGroup_Assign(r.instance, CheckPtr(Source))
}

// 获取类的类型信息。
//
// Get class type information.
func (r *TRadioGroup) ClassType() TClass {
	return RadioGroup_ClassType(r.instance)
}

// 获取当前对象类名称。
//
// Get the current object class name.
func (r *TRadioGroup) ClassName() string {
	return RadioGroup_ClassName(r.instance)
}

// 获取当前对象实例大小。
//
// Get the current object instance size.
func (r *TRadioGroup) InstanceSize() int32 {
	return RadioGroup_InstanceSize(r.instance)
}

// 判断当前类是否继承自指定类。
//
// Determine whether the current class inherits from the specified class.
func (r *TRadioGroup) InheritsFrom(AClass TClass) bool {
	return RadioGroup_InheritsFrom(r.instance, AClass)
}

// 与一个对象进行比较。
//
// Compare with an object.
func (r *TRadioGroup) Equals(Obj IObject) bool {
	return RadioGroup_Equals(r.instance, CheckPtr(Obj))
}

// 获取类的哈希值。
//
// Get the hash value of the class.
func (r *TRadioGroup) GetHashCode() int32 {
	return RadioGroup_GetHashCode(r.instance)
}

// 文本类信息。
//
// Text information.
func (r *TRadioGroup) ToString() string {
	return RadioGroup_ToString(r.instance)
}

func (r *TRadioGroup) AnchorToNeighbour(ASide TAnchorKind, ASpace int32, ASibling IControl) {
	RadioGroup_AnchorToNeighbour(r.instance, ASide, ASpace, CheckPtr(ASibling))
}

func (r *TRadioGroup) AnchorParallel(ASide TAnchorKind, ASpace int32, ASibling IControl) {
	RadioGroup_AnchorParallel(r.instance, ASide, ASpace, CheckPtr(ASibling))
}

// 置于指定控件的横向中心。
func (r *TRadioGroup) AnchorHorizontalCenterTo(ASibling IControl) {
	RadioGroup_AnchorHorizontalCenterTo(r.instance, CheckPtr(ASibling))
}

// 置于指定控件的纵向中心。
func (r *TRadioGroup) AnchorVerticalCenterTo(ASibling IControl) {
	RadioGroup_AnchorVerticalCenterTo(r.instance, CheckPtr(ASibling))
}

func (r *TRadioGroup) AnchorSame(ASide TAnchorKind, ASibling IControl) {
	RadioGroup_AnchorSame(r.instance, ASide, CheckPtr(ASibling))
}

func (r *TRadioGroup) AnchorAsAlign(ATheAlign TAlign, ASpace int32) {
	RadioGroup_AnchorAsAlign(r.instance, ATheAlign, ASpace)
}

func (r *TRadioGroup) AnchorClient(ASpace int32) {
	RadioGroup_AnchorClient(r.instance, ASpace)
}

func (r *TRadioGroup) ScaleDesignToForm(ASize int32) int32 {
	return RadioGroup_ScaleDesignToForm(r.instance, ASize)
}

func (r *TRadioGroup) ScaleFormToDesign(ASize int32) int32 {
	return RadioGroup_ScaleFormToDesign(r.instance, ASize)
}

func (r *TRadioGroup) Scale96ToForm(ASize int32) int32 {
	return RadioGroup_Scale96ToForm(r.instance, ASize)
}

func (r *TRadioGroup) ScaleFormTo96(ASize int32) int32 {
	return RadioGroup_ScaleFormTo96(r.instance, ASize)
}

func (r *TRadioGroup) Scale96ToFont(ASize int32) int32 {
	return RadioGroup_Scale96ToFont(r.instance, ASize)
}

func (r *TRadioGroup) ScaleFontTo96(ASize int32) int32 {
	return RadioGroup_ScaleFontTo96(r.instance, ASize)
}

func (r *TRadioGroup) ScaleScreenToFont(ASize int32) int32 {
	return RadioGroup_ScaleScreenToFont(r.instance, ASize)
}

func (r *TRadioGroup) ScaleFontToScreen(ASize int32) int32 {
	return RadioGroup_ScaleFontToScreen(r.instance, ASize)
}

func (r *TRadioGroup) Scale96ToScreen(ASize int32) int32 {
	return RadioGroup_Scale96ToScreen(r.instance, ASize)
}

func (r *TRadioGroup) ScaleScreenTo96(ASize int32) int32 {
	return RadioGroup_ScaleScreenTo96(r.instance, ASize)
}

func (r *TRadioGroup) AutoAdjustLayout(AMode TLayoutAdjustmentPolicy, AFromPPI int32, AToPPI int32, AOldFormWidth int32, ANewFormWidth int32) {
	RadioGroup_AutoAdjustLayout(r.instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)
}

func (r *TRadioGroup) FixDesignFontsPPI(ADesignTimePPI int32) {
	RadioGroup_FixDesignFontsPPI(r.instance, ADesignTimePPI)
}

func (r *TRadioGroup) ScaleFontsPPI(AToPPI int32, AProportion float64) {
	RadioGroup_ScaleFontsPPI(r.instance, AToPPI, AProportion)
}

func (r *TRadioGroup) SetOnSelectionChanged(fn TNotifyEvent) {
	RadioGroup_SetOnSelectionChanged(r.instance, fn)
}

// 获取控件自动调整。
//
// Get Control automatically adjusts.
func (r *TRadioGroup) Align() TAlign {
	return RadioGroup_GetAlign(r.instance)
}

// 设置控件自动调整。
//
// Set Control automatically adjusts.
func (r *TRadioGroup) SetAlign(value TAlign) {
	RadioGroup_SetAlign(r.instance, value)
}

// 获取四个角位置的锚点。
func (r *TRadioGroup) Anchors() TAnchors {
	return RadioGroup_GetAnchors(r.instance)
}

// 设置四个角位置的锚点。
func (r *TRadioGroup) SetAnchors(value TAnchors) {
	RadioGroup_SetAnchors(r.instance, value)
}

func (r *TRadioGroup) BiDiMode() TBiDiMode {
	return RadioGroup_GetBiDiMode(r.instance)
}

func (r *TRadioGroup) SetBiDiMode(value TBiDiMode) {
	RadioGroup_SetBiDiMode(r.instance, value)
}

// 获取控件标题。
//
// Get the control title.
func (r *TRadioGroup) Caption() string {
	return RadioGroup_GetCaption(r.instance)
}

// 设置控件标题。
//
// Set the control title.
func (r *TRadioGroup) SetCaption(value string) {
	RadioGroup_SetCaption(r.instance, value)
}

// 获取颜色。
//
// Get color.
func (r *TRadioGroup) Color() TColor {
	return RadioGroup_GetColor(r.instance)
}

// 设置颜色。
//
// Set color.
func (r *TRadioGroup) SetColor(value TColor) {
	RadioGroup_SetColor(r.instance, value)
}

func (r *TRadioGroup) Columns() int32 {
	return RadioGroup_GetColumns(r.instance)
}

func (r *TRadioGroup) SetColumns(value int32) {
	RadioGroup_SetColumns(r.instance, value)
}

// 获取设置控件双缓冲。
//
// Get Set control double buffering.
func (r *TRadioGroup) DoubleBuffered() bool {
	return RadioGroup_GetDoubleBuffered(r.instance)
}

// 设置设置控件双缓冲。
//
// Set Set control double buffering.
func (r *TRadioGroup) SetDoubleBuffered(value bool) {
	RadioGroup_SetDoubleBuffered(r.instance, value)
}

// 获取设置控件拖拽时的光标。
//
// Get Set the cursor when the control is dragged.
func (r *TRadioGroup) DragCursor() TCursor {
	return RadioGroup_GetDragCursor(r.instance)
}

// 设置设置控件拖拽时的光标。
//
// Set Set the cursor when the control is dragged.
func (r *TRadioGroup) SetDragCursor(value TCursor) {
	RadioGroup_SetDragCursor(r.instance, value)
}

// 获取拖拽模式。
//
// Get Drag mode.
func (r *TRadioGroup) DragMode() TDragMode {
	return RadioGroup_GetDragMode(r.instance)
}

// 设置拖拽模式。
//
// Set Drag mode.
func (r *TRadioGroup) SetDragMode(value TDragMode) {
	RadioGroup_SetDragMode(r.instance, value)
}

// 获取控件启用。
//
// Get the control enabled.
func (r *TRadioGroup) Enabled() bool {
	return RadioGroup_GetEnabled(r.instance)
}

// 设置控件启用。
//
// Set the control enabled.
func (r *TRadioGroup) SetEnabled(value bool) {
	RadioGroup_SetEnabled(r.instance, value)
}

// 获取字体。
//
// Get Font.
func (r *TRadioGroup) Font() *TFont {
	return AsFont(RadioGroup_GetFont(r.instance))
}

// 设置字体。
//
// Set Font.
func (r *TRadioGroup) SetFont(value *TFont) {
	RadioGroup_SetFont(r.instance, CheckPtr(value))
}

func (r *TRadioGroup) ItemIndex() int32 {
	return RadioGroup_GetItemIndex(r.instance)
}

func (r *TRadioGroup) SetItemIndex(value int32) {
	RadioGroup_SetItemIndex(r.instance, value)
}

func (r *TRadioGroup) Items() *TStrings {
	return AsStrings(RadioGroup_GetItems(r.instance))
}

func (r *TRadioGroup) SetItems(value IStrings) {
	RadioGroup_SetItems(r.instance, CheckPtr(value))
}

// 获取约束控件大小。
func (r *TRadioGroup) Constraints() *TSizeConstraints {
	return AsSizeConstraints(RadioGroup_GetConstraints(r.instance))
}

// 设置约束控件大小。
func (r *TRadioGroup) SetConstraints(value *TSizeConstraints) {
	RadioGroup_SetConstraints(r.instance, CheckPtr(value))
}

func (r *TRadioGroup) ParentBackground() bool {
	return RadioGroup_GetParentBackground(r.instance)
}

func (r *TRadioGroup) SetParentBackground(value bool) {
	RadioGroup_SetParentBackground(r.instance, value)
}

// 获取使用父容器颜色。
//
// Get parent color.
func (r *TRadioGroup) ParentColor() bool {
	return RadioGroup_GetParentColor(r.instance)
}

// 设置使用父容器颜色。
//
// Set parent color.
func (r *TRadioGroup) SetParentColor(value bool) {
	RadioGroup_SetParentColor(r.instance, value)
}

// 获取使用父容器双缓冲。
//
// Get Parent container double buffering.
func (r *TRadioGroup) ParentDoubleBuffered() bool {
	return RadioGroup_GetParentDoubleBuffered(r.instance)
}

// 设置使用父容器双缓冲。
//
// Set Parent container double buffering.
func (r *TRadioGroup) SetParentDoubleBuffered(value bool) {
	RadioGroup_SetParentDoubleBuffered(r.instance, value)
}

// 获取使用父容器字体。
//
// Get Parent container font.
func (r *TRadioGroup) ParentFont() bool {
	return RadioGroup_GetParentFont(r.instance)
}

// 设置使用父容器字体。
//
// Set Parent container font.
func (r *TRadioGroup) SetParentFont(value bool) {
	RadioGroup_SetParentFont(r.instance, value)
}

// 获取以父容器的ShowHint属性为准。
func (r *TRadioGroup) ParentShowHint() bool {
	return RadioGroup_GetParentShowHint(r.instance)
}

// 设置以父容器的ShowHint属性为准。
func (r *TRadioGroup) SetParentShowHint(value bool) {
	RadioGroup_SetParentShowHint(r.instance, value)
}

// 获取右键菜单。
//
// Get Right click menu.
func (r *TRadioGroup) PopupMenu() *TPopupMenu {
	return AsPopupMenu(RadioGroup_GetPopupMenu(r.instance))
}

// 设置右键菜单。
//
// Set Right click menu.
func (r *TRadioGroup) SetPopupMenu(value IComponent) {
	RadioGroup_SetPopupMenu(r.instance, CheckPtr(value))
}

// 获取显示鼠标悬停提示。
//
// Get Show mouseover tips.
func (r *TRadioGroup) ShowHint() bool {
	return RadioGroup_GetShowHint(r.instance)
}

// 设置显示鼠标悬停提示。
//
// Set Show mouseover tips.
func (r *TRadioGroup) SetShowHint(value bool) {
	RadioGroup_SetShowHint(r.instance, value)
}

// 获取Tab切换顺序序号。
//
// Get Tab switching sequence number.
func (r *TRadioGroup) TabOrder() TTabOrder {
	return RadioGroup_GetTabOrder(r.instance)
}

// 设置Tab切换顺序序号。
//
// Set Tab switching sequence number.
func (r *TRadioGroup) SetTabOrder(value TTabOrder) {
	RadioGroup_SetTabOrder(r.instance, value)
}

// 获取Tab可停留。
//
// Get Tab can stay.
func (r *TRadioGroup) TabStop() bool {
	return RadioGroup_GetTabStop(r.instance)
}

// 设置Tab可停留。
//
// Set Tab can stay.
func (r *TRadioGroup) SetTabStop(value bool) {
	RadioGroup_SetTabStop(r.instance, value)
}

// 获取控件可视。
//
// Get the control visible.
func (r *TRadioGroup) Visible() bool {
	return RadioGroup_GetVisible(r.instance)
}

// 设置控件可视。
//
// Set the control visible.
func (r *TRadioGroup) SetVisible(value bool) {
	RadioGroup_SetVisible(r.instance, value)
}

// 设置控件单击事件。
//
// Set control click event.
func (r *TRadioGroup) SetOnClick(fn TNotifyEvent) {
	RadioGroup_SetOnClick(r.instance, fn)
}

// 设置拖拽下落事件。
//
// Set Drag and drop event.
func (r *TRadioGroup) SetOnDragDrop(fn TDragDropEvent) {
	RadioGroup_SetOnDragDrop(r.instance, fn)
}

// 设置拖拽完成事件。
//
// Set Drag and drop completion event.
func (r *TRadioGroup) SetOnDragOver(fn TDragOverEvent) {
	RadioGroup_SetOnDragOver(r.instance, fn)
}

// 设置拖拽结束。
//
// Set End of drag.
func (r *TRadioGroup) SetOnEndDrag(fn TEndDragEvent) {
	RadioGroup_SetOnEndDrag(r.instance, fn)
}

// 设置焦点进入。
//
// Set Focus entry.
func (r *TRadioGroup) SetOnEnter(fn TNotifyEvent) {
	RadioGroup_SetOnEnter(r.instance, fn)
}

// 设置焦点退出。
//
// Set Focus exit.
func (r *TRadioGroup) SetOnExit(fn TNotifyEvent) {
	RadioGroup_SetOnExit(r.instance, fn)
}

// 获取依靠客户端总数。
func (r *TRadioGroup) DockClientCount() int32 {
	return RadioGroup_GetDockClientCount(r.instance)
}

// 获取停靠站点。
//
// Get Docking site.
func (r *TRadioGroup) DockSite() bool {
	return RadioGroup_GetDockSite(r.instance)
}

// 设置停靠站点。
//
// Set Docking site.
func (r *TRadioGroup) SetDockSite(value bool) {
	RadioGroup_SetDockSite(r.instance, value)
}

// 获取鼠标是否在客户端，仅VCL有效。
//
// Get Whether the mouse is on the client, only VCL is valid.
func (r *TRadioGroup) MouseInClient() bool {
	return RadioGroup_GetMouseInClient(r.instance)
}

// 获取当前停靠的可视总数。
//
// Get The total number of visible calls currently docked.
func (r *TRadioGroup) VisibleDockClientCount() int32 {
	return RadioGroup_GetVisibleDockClientCount(r.instance)
}

// 获取画刷对象。
//
// Get Brush.
func (r *TRadioGroup) Brush() *TBrush {
	return AsBrush(RadioGroup_GetBrush(r.instance))
}

// 获取子控件数。
//
// Get Number of child controls.
func (r *TRadioGroup) ControlCount() int32 {
	return RadioGroup_GetControlCount(r.instance)
}

// 获取控件句柄。
//
// Get Control handle.
func (r *TRadioGroup) Handle() HWND {
	return RadioGroup_GetHandle(r.instance)
}

// 获取父容器句柄。
//
// Get Parent container handle.
func (r *TRadioGroup) ParentWindow() HWND {
	return RadioGroup_GetParentWindow(r.instance)
}

// 设置父容器句柄。
//
// Set Parent container handle.
func (r *TRadioGroup) SetParentWindow(value HWND) {
	RadioGroup_SetParentWindow(r.instance, value)
}

func (r *TRadioGroup) Showing() bool {
	return RadioGroup_GetShowing(r.instance)
}

// 获取使用停靠管理。
func (r *TRadioGroup) UseDockManager() bool {
	return RadioGroup_GetUseDockManager(r.instance)
}

// 设置使用停靠管理。
func (r *TRadioGroup) SetUseDockManager(value bool) {
	RadioGroup_SetUseDockManager(r.instance, value)
}

func (r *TRadioGroup) Action() *TAction {
	return AsAction(RadioGroup_GetAction(r.instance))
}

func (r *TRadioGroup) SetAction(value IComponent) {
	RadioGroup_SetAction(r.instance, CheckPtr(value))
}

func (r *TRadioGroup) BoundsRect() TRect {
	return RadioGroup_GetBoundsRect(r.instance)
}

func (r *TRadioGroup) SetBoundsRect(value TRect) {
	RadioGroup_SetBoundsRect(r.instance, value)
}

// 获取客户区高度。
//
// Get client height.
func (r *TRadioGroup) ClientHeight() int32 {
	return RadioGroup_GetClientHeight(r.instance)
}

// 设置客户区高度。
//
// Set client height.
func (r *TRadioGroup) SetClientHeight(value int32) {
	RadioGroup_SetClientHeight(r.instance, value)
}

func (r *TRadioGroup) ClientOrigin() TPoint {
	return RadioGroup_GetClientOrigin(r.instance)
}

// 获取客户区矩形。
//
// Get client rectangle.
func (r *TRadioGroup) ClientRect() TRect {
	return RadioGroup_GetClientRect(r.instance)
}

// 获取客户区宽度。
//
// Get client width.
func (r *TRadioGroup) ClientWidth() int32 {
	return RadioGroup_GetClientWidth(r.instance)
}

// 设置客户区宽度。
//
// Set client width.
func (r *TRadioGroup) SetClientWidth(value int32) {
	RadioGroup_SetClientWidth(r.instance, value)
}

// 获取控件状态。
//
// Get control state.
func (r *TRadioGroup) ControlState() TControlState {
	return RadioGroup_GetControlState(r.instance)
}

// 设置控件状态。
//
// Set control state.
func (r *TRadioGroup) SetControlState(value TControlState) {
	RadioGroup_SetControlState(r.instance, value)
}

// 获取控件样式。
//
// Get control style.
func (r *TRadioGroup) ControlStyle() TControlStyle {
	return RadioGroup_GetControlStyle(r.instance)
}

// 设置控件样式。
//
// Set control style.
func (r *TRadioGroup) SetControlStyle(value TControlStyle) {
	RadioGroup_SetControlStyle(r.instance, value)
}

func (r *TRadioGroup) Floating() bool {
	return RadioGroup_GetFloating(r.instance)
}

// 获取控件父容器。
//
// Get control parent container.
func (r *TRadioGroup) Parent() *TWinControl {
	return AsWinControl(RadioGroup_GetParent(r.instance))
}

// 设置控件父容器。
//
// Set control parent container.
func (r *TRadioGroup) SetParent(value IWinControl) {
	RadioGroup_SetParent(r.instance, CheckPtr(value))
}

// 获取左边位置。
//
// Get Left position.
func (r *TRadioGroup) Left() int32 {
	return RadioGroup_GetLeft(r.instance)
}

// 设置左边位置。
//
// Set Left position.
func (r *TRadioGroup) SetLeft(value int32) {
	RadioGroup_SetLeft(r.instance, value)
}

// 获取顶边位置。
//
// Get Top position.
func (r *TRadioGroup) Top() int32 {
	return RadioGroup_GetTop(r.instance)
}

// 设置顶边位置。
//
// Set Top position.
func (r *TRadioGroup) SetTop(value int32) {
	RadioGroup_SetTop(r.instance, value)
}

// 获取宽度。
//
// Get width.
func (r *TRadioGroup) Width() int32 {
	return RadioGroup_GetWidth(r.instance)
}

// 设置宽度。
//
// Set width.
func (r *TRadioGroup) SetWidth(value int32) {
	RadioGroup_SetWidth(r.instance, value)
}

// 获取高度。
//
// Get height.
func (r *TRadioGroup) Height() int32 {
	return RadioGroup_GetHeight(r.instance)
}

// 设置高度。
//
// Set height.
func (r *TRadioGroup) SetHeight(value int32) {
	RadioGroup_SetHeight(r.instance, value)
}

// 获取控件光标。
//
// Get control cursor.
func (r *TRadioGroup) Cursor() TCursor {
	return RadioGroup_GetCursor(r.instance)
}

// 设置控件光标。
//
// Set control cursor.
func (r *TRadioGroup) SetCursor(value TCursor) {
	RadioGroup_SetCursor(r.instance, value)
}

// 获取组件鼠标悬停提示。
//
// Get component mouse hints.
func (r *TRadioGroup) Hint() string {
	return RadioGroup_GetHint(r.instance)
}

// 设置组件鼠标悬停提示。
//
// Set component mouse hints.
func (r *TRadioGroup) SetHint(value string) {
	RadioGroup_SetHint(r.instance, value)
}

// 获取组件总数。
//
// Get the total number of components.
func (r *TRadioGroup) ComponentCount() int32 {
	return RadioGroup_GetComponentCount(r.instance)
}

// 获取组件索引。
//
// Get component index.
func (r *TRadioGroup) ComponentIndex() int32 {
	return RadioGroup_GetComponentIndex(r.instance)
}

// 设置组件索引。
//
// Set component index.
func (r *TRadioGroup) SetComponentIndex(value int32) {
	RadioGroup_SetComponentIndex(r.instance, value)
}

// 获取组件所有者。
//
// Get component owner.
func (r *TRadioGroup) Owner() *TComponent {
	return AsComponent(RadioGroup_GetOwner(r.instance))
}

// 获取组件名称。
//
// Get the component name.
func (r *TRadioGroup) Name() string {
	return RadioGroup_GetName(r.instance)
}

// 设置组件名称。
//
// Set the component name.
func (r *TRadioGroup) SetName(value string) {
	RadioGroup_SetName(r.instance, value)
}

// 获取对象标记。
//
// Get the control tag.
func (r *TRadioGroup) Tag() int {
	return RadioGroup_GetTag(r.instance)
}

// 设置对象标记。
//
// Set the control tag.
func (r *TRadioGroup) SetTag(value int) {
	RadioGroup_SetTag(r.instance, value)
}

// 获取左边锚点。
func (r *TRadioGroup) AnchorSideLeft() *TAnchorSide {
	return AsAnchorSide(RadioGroup_GetAnchorSideLeft(r.instance))
}

// 设置左边锚点。
func (r *TRadioGroup) SetAnchorSideLeft(value *TAnchorSide) {
	RadioGroup_SetAnchorSideLeft(r.instance, CheckPtr(value))
}

// 获取顶边锚点。
func (r *TRadioGroup) AnchorSideTop() *TAnchorSide {
	return AsAnchorSide(RadioGroup_GetAnchorSideTop(r.instance))
}

// 设置顶边锚点。
func (r *TRadioGroup) SetAnchorSideTop(value *TAnchorSide) {
	RadioGroup_SetAnchorSideTop(r.instance, CheckPtr(value))
}

// 获取右边锚点。
func (r *TRadioGroup) AnchorSideRight() *TAnchorSide {
	return AsAnchorSide(RadioGroup_GetAnchorSideRight(r.instance))
}

// 设置右边锚点。
func (r *TRadioGroup) SetAnchorSideRight(value *TAnchorSide) {
	RadioGroup_SetAnchorSideRight(r.instance, CheckPtr(value))
}

// 获取底边锚点。
func (r *TRadioGroup) AnchorSideBottom() *TAnchorSide {
	return AsAnchorSide(RadioGroup_GetAnchorSideBottom(r.instance))
}

// 设置底边锚点。
func (r *TRadioGroup) SetAnchorSideBottom(value *TAnchorSide) {
	RadioGroup_SetAnchorSideBottom(r.instance, CheckPtr(value))
}

func (r *TRadioGroup) ChildSizing() *TControlChildSizing {
	return AsControlChildSizing(RadioGroup_GetChildSizing(r.instance))
}

func (r *TRadioGroup) SetChildSizing(value *TControlChildSizing) {
	RadioGroup_SetChildSizing(r.instance, CheckPtr(value))
}

// 获取边框间距。
func (r *TRadioGroup) BorderSpacing() *TControlBorderSpacing {
	return AsControlBorderSpacing(RadioGroup_GetBorderSpacing(r.instance))
}

// 设置边框间距。
func (r *TRadioGroup) SetBorderSpacing(value *TControlBorderSpacing) {
	RadioGroup_SetBorderSpacing(r.instance, CheckPtr(value))
}

// 获取指定索引停靠客户端。
func (r *TRadioGroup) DockClients(Index int32) *TControl {
	return AsControl(RadioGroup_GetDockClients(r.instance, Index))
}

// 获取指定索引子控件。
func (r *TRadioGroup) Controls(Index int32) *TControl {
	return AsControl(RadioGroup_GetControls(r.instance, Index))
}

// 获取指定索引组件。
//
// Get the specified index component.
func (r *TRadioGroup) Components(AIndex int32) *TComponent {
	return AsComponent(RadioGroup_GetComponents(r.instance, AIndex))
}

// 获取锚侧面。
func (r *TRadioGroup) AnchorSide(AKind TAnchorKind) *TAnchorSide {
	return AsAnchorSide(RadioGroup_GetAnchorSide(r.instance, AKind))
}
