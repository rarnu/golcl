//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	"unsafe"

	. "github.com/rarnu/golcl/lcl/api"
	. "github.com/rarnu/golcl/lcl/types"
)

type TAction struct {
	IComponent
	instance uintptr
	// 特殊情况下使用，主要应对Go的GC问题，与LCL没有太多关系。
	ptr unsafe.Pointer
}

// NewAction 创建一个新的对象。
func NewAction(owner IComponent) *TAction {
	a := new(TAction)
	a.instance = Action_Create(CheckPtr(owner))
	a.ptr = unsafe.Pointer(a.instance)
	return a
}

// AsAction 动态转换一个已存在的对象实例。
func AsAction(obj any) *TAction {
	instance, ptr := getInstance(obj)
	if instance == 0 {
		return nil
	}
	return &TAction{instance: instance, ptr: ptr}
}

// ActionFromInst 新建一个对象来自已经存在的对象实例指针。
// Deprecated: use AsAction.
func ActionFromInst(inst uintptr) *TAction {
	return AsAction(inst)
}

// ActionFromObj 新建一个对象来自已经存在的对象实例。
// Deprecated: use AsAction.
func ActionFromObj(obj IObject) *TAction {
	return AsAction(obj)
}

// ActionFromUnsafePointer 新建一个对象来自不安全的地址。注意：使用此函数可能造成一些不明情况，慎用。
// Deprecated: use AsAction.
func ActionFromUnsafePointer(ptr unsafe.Pointer) *TAction {
	return AsAction(ptr)
}

// Free 释放对象。
func (a *TAction) Free() {
	if a.instance != 0 {
		Action_Free(a.instance)
		a.instance, a.ptr = 0, nullptr
	}
}

// Instance 返回对象实例指针。
func (a *TAction) Instance() uintptr {
	return a.instance
}

// UnsafeAddr 获取一个不安全的地址。
func (a *TAction) UnsafeAddr() unsafe.Pointer {
	return a.ptr
}

// IsValid 检测地址是否为空。
func (a *TAction) IsValid() bool {
	return a.instance != 0
}

// Is 检测当前对象是否继承自目标对象。
func (a *TAction) Is() TIs {
	return TIs(a.instance)
}

// 动态转换当前对象为目标对象。
//
// Dynamically convert the current object to the target object.
//func (a *TAction) As() TAs {
//    return TAs(a.instance)
//}

// TActionClass 获取类信息指针。
func TActionClass() TClass {
	return Action_StaticClassType()
}

// Execute 执行。
func (a *TAction) Execute() bool {
	return Action_Execute(a.instance)
}

// Update 控件更新。
func (a *TAction) Update() bool {
	return Action_Update(a.instance)
}

// HasParent 是否有父容器。
func (a *TAction) HasParent() bool {
	return Action_HasParent(a.instance)
}

// FindComponent 查找指定名称的组件。
func (a *TAction) FindComponent(AName string) *TComponent {
	return AsComponent(Action_FindComponent(a.instance, AName))
}

// GetNamePath 获取类名路径。
func (a *TAction) GetNamePath() string {
	return Action_GetNamePath(a.instance)
}

// Assign 复制一个对象，如果对象实现了此方法的话。
func (a *TAction) Assign(Source IObject) {
	Action_Assign(a.instance, CheckPtr(Source))
}

// ClassType 获取类的类型信息。
func (a *TAction) ClassType() TClass {
	return Action_ClassType(a.instance)
}

// ClassName 获取当前对象类名称。
func (a *TAction) ClassName() string {
	return Action_ClassName(a.instance)
}

// InstanceSize 获取当前对象实例大小。
func (a *TAction) InstanceSize() int32 {
	return Action_InstanceSize(a.instance)
}

// InheritsFrom 判断当前类是否继承自指定类。
func (a *TAction) InheritsFrom(AClass TClass) bool {
	return Action_InheritsFrom(a.instance, AClass)
}

// Equals 与一个对象进行比较。
func (a *TAction) Equals(Obj IObject) bool {
	return Action_Equals(a.instance, CheckPtr(Obj))
}

// GetHashCode 获取类的哈希值。
func (a *TAction) GetHashCode() int32 {
	return Action_GetHashCode(a.instance)
}

// ToString 文本类信息。
func (a *TAction) ToString() string {
	return Action_ToString(a.instance)
}

func (a *TAction) AutoCheck() bool {
	return Action_GetAutoCheck(a.instance)
}

func (a *TAction) SetAutoCheck(value bool) {
	Action_SetAutoCheck(a.instance, value)
}

// Caption 获取控件标题。
func (a *TAction) Caption() string {
	return Action_GetCaption(a.instance)
}

// SetCaption 设置控件标题。
func (a *TAction) SetCaption(value string) {
	Action_SetCaption(a.instance, value)
}

// Checked 获取是否选中。
func (a *TAction) Checked() bool {
	return Action_GetChecked(a.instance)
}

// SetChecked 设置是否选中。
func (a *TAction) SetChecked(value bool) {
	Action_SetChecked(a.instance, value)
}

// Enabled 获取控件启用。
func (a *TAction) Enabled() bool {
	return Action_GetEnabled(a.instance)
}

// SetEnabled 设置控件启用。
func (a *TAction) SetEnabled(value bool) {
	Action_SetEnabled(a.instance, value)
}

// GroupIndex 获取团组索引。
func (a *TAction) GroupIndex() int32 {
	return Action_GetGroupIndex(a.instance)
}

// SetGroupIndex 设置团组索引。
func (a *TAction) SetGroupIndex(value int32) {
	Action_SetGroupIndex(a.instance, value)
}

// Hint 获取组件鼠标悬停提示。
func (a *TAction) Hint() string {
	return Action_GetHint(a.instance)
}

// SetHint 设置组件鼠标悬停提示。
func (a *TAction) SetHint(value string) {
	Action_SetHint(a.instance, value)
}

// ImageIndex 获取图像在images中的索引。
func (a *TAction) ImageIndex() int32 {
	return Action_GetImageIndex(a.instance)
}

// SetImageIndex 设置图像在images中的索引。
func (a *TAction) SetImageIndex(value int32) {
	Action_SetImageIndex(a.instance, value)
}

// ShortCut 获取快捷键。
func (a *TAction) ShortCut() TShortCut {
	return Action_GetShortCut(a.instance)
}

// SetShortCut 设置快捷键。
func (a *TAction) SetShortCut(value TShortCut) {
	Action_SetShortCut(a.instance, value)
}

// Visible 获取控件可视。
func (a *TAction) Visible() bool {
	return Action_GetVisible(a.instance)
}

// SetVisible 设置控件可视。
func (a *TAction) SetVisible(value bool) {
	Action_SetVisible(a.instance, value)
}

// SetOnExecute 设置动作执行事件。
func (a *TAction) SetOnExecute(fn TNotifyEvent) {
	Action_SetOnExecute(a.instance, fn)
}

// SetOnUpdate 设置动作更新事件。
func (a *TAction) SetOnUpdate(fn TNotifyEvent) {
	Action_SetOnUpdate(a.instance, fn)
}

func (a *TAction) Index() int32 {
	return Action_GetIndex(a.instance)
}

func (a *TAction) SetIndex(value int32) {
	Action_SetIndex(a.instance, value)
}

// ComponentCount 获取组件总数。
func (a *TAction) ComponentCount() int32 {
	return Action_GetComponentCount(a.instance)
}

// ComponentIndex 获取组件索引。
func (a *TAction) ComponentIndex() int32 {
	return Action_GetComponentIndex(a.instance)
}

// SetComponentIndex 设置组件索引。
func (a *TAction) SetComponentIndex(value int32) {
	Action_SetComponentIndex(a.instance, value)
}

// Owner 获取组件所有者。
func (a *TAction) Owner() *TComponent {
	return AsComponent(Action_GetOwner(a.instance))
}

// Name 获取组件名称。
func (a *TAction) Name() string {
	return Action_GetName(a.instance)
}

// SetName 设置组件名称。
func (a *TAction) SetName(value string) {
	Action_SetName(a.instance, value)
}

// Tag 获取对象标记。
func (a *TAction) Tag() int {
	return Action_GetTag(a.instance)
}

// SetTag 设置对象标记。
func (a *TAction) SetTag(value int) {
	Action_SetTag(a.instance, value)
}

// Components 获取指定索引组件。
func (a *TAction) Components(AIndex int32) *TComponent {
	return AsComponent(Action_GetComponents(a.instance, AIndex))
}
